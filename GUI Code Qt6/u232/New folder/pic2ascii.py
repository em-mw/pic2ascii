# Form implementation generated from reading ui file 'rva.ui'
#
# Created by: PyQt6 UI code generator 6.0.3
#
# Edited by: ErMax
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.



#The License GNU (GPL) v3.0
#goes here

#IMPORTANT TO NOTE

#THE FINE IMPORTS

#Self Made

#import more

#Important
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget, QApplication
from PyQt6.QtGui import QFocusEvent
import webbrowser
import sys
import reis
import shutil
import colorsys
#from tqdm import tqdm
#pta class imports (fine imports)


#NOTE: You are responcible for installing all of the depencancies if you want this to work
    #PIL is the new Pillow Library
#####
#!#from sty import fg, rs
#!#import PIL
from PIL import ImageDraw, ImageFont
import PIL
#####
import math
from time import sleep

#all (fine imports)
from platform import platform
import os
from subprocess import Popen
from multiprocessing import Process
from threading import Thread
import picgen
import psutil
from more import isInt, isFloat

#call_atrib and call_error (fine imports)
from tkinter.filedialog import askdirectory as askdir
from tkinter.filedialog import askopenfilenames, askopenfilename
from tkinter import *
from tkinter import messagebox

from sty import fg

#this one is only used for 2 methods
import decimal
#global sys var

#def winslash():
#    if int(os.name.lower().find('nt')) != int(-1):
#        fwinslash = str('\\')
#    else:
#        fwinslash = str('/')
#    return fwinslash


#to prevent the worst, app is here insted of the if statment
app = QtWidgets.QApplication(sys.argv)

#default value for processes for now
processes = int(1)
file_path_list = False
os.system("")

pre_fnt=str(os.getcwd() + os.sep + 'font' + os.sep + 'anonymouspro.ttf')
# Form implementation generated from reading ui file 'C:\Users\Legion\Documents\giti\pic2ascii-GUI\GUI Code Qt6 & Qt5\u232\rva (don't touch unless, know wha yo doi'n)\rva.ui'
#
# Created by: PyQt6 UI code generator 6.0.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.WindowModality.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(985, 462)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(985, 462))
        MainWindow.setMaximumSize(QtCore.QSize(985, 462))
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        MainWindow.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:\\Users\\ErMax\\Desktop\\pic2ascii\\GUI Code Qt6\\u232\\rva (don\'t touch unless, know wha yo doi\'n)\\../../../../../.designer/backup/Untitled.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setIconSize(QtCore.QSize(24, 24))
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonStyle.ToolButtonIconOnly)
        MainWindow.setAnimated(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        MainWindow.setDockNestingEnabled(False)
        self.widgetMain = QtWidgets.QWidget(MainWindow)
        self.widgetMain.setObjectName("widgetMain")
        self.tabWidget = QtWidgets.QTabWidget(self.widgetMain)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 987, 423))
        self.tabWidget.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.tabWidget.setFont(font)
        self.tabWidget.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.tabWidget.setStatusTip("")
        self.tabWidget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.tabWidget.setAutoFillBackground(True)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setIconSize(QtCore.QSize(16, 16))
        self.tabWidget.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tabHome = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.tabHome.setFont(font)
        self.tabHome.setAutoFillBackground(False)
        self.tabHome.setStyleSheet("background-color: rgb(250, 250, 250);")
        self.tabHome.setObjectName("tabHome")
        self.label = QtWidgets.QLabel(self.tabHome)
        self.label.setGeometry(QtCore.QRect(0, 0, 211, 71))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tabHome)
        self.label_2.setGeometry(QtCore.QRect(60, 50, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_2.setFont(font)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label_2.setOpenExternalLinks(False)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.tabHome)
        self.label_3.setGeometry(QtCore.QRect(160, 80, 261, 41))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label_3.setObjectName("label_3")
        self.textEdit = QtWidgets.QTextEdit(self.tabHome)
        self.textEdit.setEnabled(True)
        self.textEdit.setGeometry(QtCore.QRect(450, 0, 501, 391))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.textEdit.setFont(font)
        self.textEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.textEdit.setMouseTracking(False)
        self.textEdit.setToolTip("")
        self.textEdit.setToolTipDuration(-1)
        self.textEdit.setAutoFillBackground(False)
        self.textEdit.setStyleSheet("")
        self.textEdit.setDocumentTitle("")
        self.textEdit.setUndoRedoEnabled(False)
        self.textEdit.setReadOnly(True)
        self.textEdit.setAcceptRichText(True)
        self.textEdit.setObjectName("textEdit")
        self.progressBar_2 = QtWidgets.QProgressBar(self.tabHome)
        self.progressBar_2.setGeometry(QtCore.QRect(970, 0, 16, 391))
        self.progressBar_2.setProperty("value", 0)
        self.progressBar_2.setTextVisible(False)
        self.progressBar_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.progressBar_2.setInvertedAppearance(False)
        self.progressBar_2.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar_2.setObjectName("progressBar_2")
        self.line_2 = QtWidgets.QFrame(self.tabHome)
        self.line_2.setGeometry(QtCore.QRect(10, 120, 436, 16))
        self.line_2.setAutoFillBackground(False)
        self.line_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_2.setObjectName("line_2")
        self.tabWidget.addTab(self.tabHome, "")
        self.tabSetup = QtWidgets.QWidget()
        self.tabSetup.setAutoFillBackground(True)
        self.tabSetup.setObjectName("tabSetup")
        self.labelinDesk = QtWidgets.QLabel(self.tabSetup)
        self.labelinDesk.setGeometry(QtCore.QRect(10, 10, 181, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelinDesk.setFont(font)
        self.labelinDesk.setToolTipDuration(0)
        self.labelinDesk.setObjectName("labelinDesk")
        self.lineEditInDir = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditInDir.setEnabled(True)
        self.lineEditInDir.setGeometry(QtCore.QRect(260, 10, 481, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditInDir.setFont(font)
        self.lineEditInDir.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.IBeamCursor))
        self.lineEditInDir.setMouseTracking(False)
        self.lineEditInDir.setToolTipDuration(0)
        self.lineEditInDir.setStyleSheet("background-color: rgb(245, 245, 245);")
        self.lineEditInDir.setText("")
        self.lineEditInDir.setFrame(True)
        self.lineEditInDir.setReadOnly(True)
        self.lineEditInDir.setClearButtonEnabled(False)
        self.lineEditInDir.setObjectName("lineEditInDir")
        self.pushButtonImageIn = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonImageIn.setGeometry(QtCore.QRect(750, 10, 211, 23))
        self.pushButtonImageIn.setToolTipDuration(0)
        self.pushButtonImageIn.setObjectName("pushButtonImageIn")
        self.labelOutDesk = QtWidgets.QLabel(self.tabSetup)
        self.labelOutDesk.setGeometry(QtCore.QRect(10, 45, 231, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelOutDesk.setFont(font)
        self.labelOutDesk.setToolTipDuration(0)
        self.labelOutDesk.setObjectName("labelOutDesk")
        self.lineEditOutDir = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditOutDir.setGeometry(QtCore.QRect(260, 45, 481, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditOutDir.setFont(font)
        self.lineEditOutDir.setToolTipDuration(0)
        self.lineEditOutDir.setStyleSheet("background-color: rgb(245, 245, 245);")
        self.lineEditOutDir.setText("")
        self.lineEditOutDir.setReadOnly(True)
        self.lineEditOutDir.setObjectName("lineEditOutDir")
        self.pushButtonFolderOut = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonFolderOut.setGeometry(QtCore.QRect(750, 45, 211, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.pushButtonFolderOut.setFont(font)
        self.pushButtonFolderOut.setToolTipDuration(0)
        self.pushButtonFolderOut.setObjectName("pushButtonFolderOut")
        self.labelFormatOut = QtWidgets.QLabel(self.tabSetup)
        self.labelFormatOut.setGeometry(QtCore.QRect(10, 80, 211, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelFormatOut.setFont(font)
        self.labelFormatOut.setObjectName("labelFormatOut")
        self.comboBoxFormatOut = QtWidgets.QComboBox(self.tabSetup)
        self.comboBoxFormatOut.setGeometry(QtCore.QRect(230, 80, 111, 22))
        self.comboBoxFormatOut.setObjectName("comboBoxFormatOut")
        self.comboBoxFormatOut.addItem("")
        self.comboBoxFormatOut.addItem("")
        self.comboBoxFormatOut.addItem("")
        self.spinDialScaleFactor = QtWidgets.QDial(self.tabSetup)
        self.spinDialScaleFactor.setGeometry(QtCore.QRect(695, 205, 156, 106))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.spinDialScaleFactor.setFont(font)
        self.spinDialScaleFactor.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.CrossCursor))
        self.spinDialScaleFactor.setToolTipDuration(0)
        self.spinDialScaleFactor.setStyleSheet("")
        self.spinDialScaleFactor.setMaximum(100)
        self.spinDialScaleFactor.setPageStep(10)
        self.spinDialScaleFactor.setProperty("value", 5)
        self.spinDialScaleFactor.setSliderPosition(5)
        self.spinDialScaleFactor.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.spinDialScaleFactor.setInvertedAppearance(False)
        self.spinDialScaleFactor.setNotchTarget(5.0)
        self.spinDialScaleFactor.setNotchesVisible(False)
        self.spinDialScaleFactor.setObjectName("spinDialScaleFactor")
        self.lineEditSF = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditSF.setGeometry(QtCore.QRect(870, 250, 51, 26))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditSF.setFont(font)
        self.lineEditSF.setReadOnly(False)
        self.lineEditSF.setObjectName("lineEditSF")
        self.labelSF = QtWidgets.QLabel(self.tabSetup)
        self.labelSF.setGeometry(QtCore.QRect(715, 310, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelSF.setFont(font)
        self.labelSF.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.labelSF.setObjectName("labelSF")
        self.line = QtWidgets.QFrame(self.tabSetup)
        self.line.setGeometry(QtCore.QRect(5, 100, 951, 20))
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.lineEditFont = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditFont.setGeometry(QtCore.QRect(185, 205, 186, 20))
        self.lineEditFont.setToolTipDuration(0)
        self.lineEditFont.setStyleSheet("background-color: rgb(245, 245, 245);")
        self.lineEditFont.setText("")
        self.lineEditFont.setReadOnly(True)
        self.lineEditFont.setObjectName("lineEditFont")
        self.pushButtonFontIn = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonFontIn.setGeometry(QtCore.QRect(375, 205, 116, 23))
        self.pushButtonFontIn.setObjectName("pushButtonFontIn")
        self.Fontlabel = QtWidgets.QLabel(self.tabSetup)
        self.Fontlabel.setGeometry(QtCore.QRect(120, 205, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.Fontlabel.setFont(font)
        self.Fontlabel.setToolTipDuration(0)
        self.Fontlabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.Fontlabel.setObjectName("Fontlabel")
        self.lineEdit = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEdit.setGeometry(QtCore.QRect(695, 195, 266, 156))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEdit.setFont(font)
        self.lineEdit.setToolTipDuration(0)
        self.lineEdit.setAutoFillBackground(False)
        self.lineEdit.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.lineEdit.setFrame(True)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.coreLabel = QtWidgets.QLabel(self.tabSetup)
        self.coreLabel.setGeometry(QtCore.QRect(10, 125, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.coreLabel.setFont(font)
        self.coreLabel.setObjectName("coreLabel")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEdit_2.setGeometry(QtCore.QRect(0, 115, 291, 56))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setToolTipDuration(0)
        self.lineEdit_2.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.lineEdit_2.setFrame(True)
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.checkBoxAutoProcess = QtWidgets.QCheckBox(self.tabSetup)
        self.checkBoxAutoProcess.setEnabled(True)
        self.checkBoxAutoProcess.setGeometry(QtCore.QRect(140, 130, 51, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.checkBoxAutoProcess.setFont(font)
        self.checkBoxAutoProcess.setObjectName("checkBoxAutoProcess")
        self.lineEditProcess = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditProcess.setEnabled(True)
        self.lineEditProcess.setGeometry(QtCore.QRect(200, 130, 66, 20))
        self.lineEditProcess.setStyleSheet("background-color: rgb(245, 245, 245);\n"
"")
        self.lineEditProcess.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditProcess.setObjectName("lineEditProcess")
        self.lineEditChar = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditChar.setGeometry(QtCore.QRect(185, 246, 471, 26))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditChar.setFont(font)
        self.lineEditChar.setAutoFillBackground(False)
        self.lineEditChar.setStyleSheet("background-color: rgb(245, 245, 245);")
        self.lineEditChar.setObjectName("lineEditChar")
        self.label_4 = QtWidgets.QLabel(self.tabSetup)
        self.label_4.setGeometry(QtCore.QRect(2, 244, 181, 24))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.progressBar_3 = QtWidgets.QProgressBar(self.tabSetup)
        self.progressBar_3.setGeometry(QtCore.QRect(970, 0, 16, 396))
        self.progressBar_3.setProperty("value", 0)
        self.progressBar_3.setTextVisible(False)
        self.progressBar_3.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.progressBar_3.setInvertedAppearance(False)
        self.progressBar_3.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar_3.setObjectName("progressBar_3")
        self.labelCharHeight = QtWidgets.QLabel(self.tabSetup)
        self.labelCharHeight.setGeometry(QtCore.QRect(25, 345, 76, 24))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelCharHeight.setFont(font)
        self.labelCharHeight.setObjectName("labelCharHeight")
        self.label_6 = QtWidgets.QLabel(self.tabSetup)
        self.label_6.setGeometry(QtCore.QRect(25, 305, 76, 24))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lineEditCharWidth = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditCharWidth.setGeometry(QtCore.QRect(105, 305, 56, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditCharWidth.setFont(font)
        self.lineEditCharWidth.setAutoFillBackground(False)
        self.lineEditCharWidth.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.lineEditCharWidth.setObjectName("lineEditCharWidth")
        self.lineEditCharHeight = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditCharHeight.setGeometry(QtCore.QRect(105, 345, 56, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditCharHeight.setFont(font)
        self.lineEditCharHeight.setAutoFillBackground(False)
        self.lineEditCharHeight.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.lineEditCharHeight.setObjectName("lineEditCharHeight")
        self.pushButtonCharWidthReset = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonCharWidthReset.setGeometry(QtCore.QRect(165, 302, 26, 26))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.pushButtonCharWidthReset.setFont(font)
        self.pushButtonCharWidthReset.setObjectName("pushButtonCharWidthReset")
        self.pushButtonCharHeightReset = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonCharHeightReset.setGeometry(QtCore.QRect(165, 345, 26, 26))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.pushButtonCharHeightReset.setFont(font)
        self.pushButtonCharHeightReset.setObjectName("pushButtonCharHeightReset")
        self.pushButtonCharReset = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonCharReset.setGeometry(QtCore.QRect(660, 245, 26, 26))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.pushButtonCharReset.setFont(font)
        self.pushButtonCharReset.setObjectName("pushButtonCharReset")
        self.lineEdit_2.raise_()
        self.lineEdit.raise_()
        self.labelinDesk.raise_()
        self.lineEditInDir.raise_()
        self.pushButtonImageIn.raise_()
        self.labelOutDesk.raise_()
        self.lineEditOutDir.raise_()
        self.pushButtonFolderOut.raise_()
        self.labelFormatOut.raise_()
        self.comboBoxFormatOut.raise_()
        self.spinDialScaleFactor.raise_()
        self.lineEditSF.raise_()
        self.labelSF.raise_()
        self.line.raise_()
        self.lineEditFont.raise_()
        self.pushButtonFontIn.raise_()
        self.Fontlabel.raise_()
        self.coreLabel.raise_()
        self.checkBoxAutoProcess.raise_()
        self.lineEditProcess.raise_()
        self.lineEditChar.raise_()
        self.label_4.raise_()
        self.progressBar_3.raise_()
        self.labelCharHeight.raise_()
        self.label_6.raise_()
        self.lineEditCharWidth.raise_()
        self.lineEditCharHeight.raise_()
        self.pushButtonCharWidthReset.raise_()
        self.pushButtonCharHeightReset.raise_()
        self.pushButtonCharReset.raise_()
        self.tabWidget.addTab(self.tabSetup, "")
        self.tabAdvanced = QtWidgets.QWidget()
        self.tabAdvanced.setAutoFillBackground(True)
        self.tabAdvanced.setObjectName("tabAdvanced")
        self.tabWidget_2 = QtWidgets.QTabWidget(self.tabAdvanced)
        self.tabWidget_2.setEnabled(False)
        self.tabWidget_2.setGeometry(QtCore.QRect(10, 65, 191, 251))
        self.tabWidget_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.tabWidget_2.setAutoFillBackground(True)
        self.tabWidget_2.setTabPosition(QtWidgets.QTabWidget.TabPosition.South)
        self.tabWidget_2.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.tabWidget_2.setDocumentMode(False)
        self.tabWidget_2.setMovable(True)
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.tabRGB = QtWidgets.QWidget()
        self.tabRGB.setAutoFillBackground(True)
        self.tabRGB.setObjectName("tabRGB")
        self.verticalSliderR = QtWidgets.QSlider(self.tabRGB)
        self.verticalSliderR.setGeometry(QtCore.QRect(20, 30, 22, 160))
        self.verticalSliderR.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderR.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderR.setAutoFillBackground(True)
        self.verticalSliderR.setMaximum(255)
        self.verticalSliderR.setProperty("value", 255)
        self.verticalSliderR.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderR.setInvertedAppearance(False)
        self.verticalSliderR.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderR.setTickInterval(10)
        self.verticalSliderR.setObjectName("verticalSliderR")
        self.verticalSliderG = QtWidgets.QSlider(self.tabRGB)
        self.verticalSliderG.setGeometry(QtCore.QRect(80, 30, 22, 160))
        self.verticalSliderG.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderG.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderG.setAutoFillBackground(True)
        self.verticalSliderG.setMaximum(255)
        self.verticalSliderG.setProperty("value", 255)
        self.verticalSliderG.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderG.setInvertedAppearance(False)
        self.verticalSliderG.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderG.setTickInterval(10)
        self.verticalSliderG.setObjectName("verticalSliderG")
        self.verticalSliderB = QtWidgets.QSlider(self.tabRGB)
        self.verticalSliderB.setGeometry(QtCore.QRect(140, 30, 22, 160))
        self.verticalSliderB.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderB.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderB.setAutoFillBackground(True)
        self.verticalSliderB.setMaximum(255)
        self.verticalSliderB.setProperty("value", 255)
        self.verticalSliderB.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderB.setInvertedAppearance(False)
        self.verticalSliderB.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderB.setTickInterval(10)
        self.verticalSliderB.setObjectName("verticalSliderB")
        self.label_B = QtWidgets.QLabel(self.tabRGB)
        self.label_B.setGeometry(QtCore.QRect(140, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_B.setFont(font)
        self.label_B.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_B.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_B.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_B.setObjectName("label_B")
        self.label_R = QtWidgets.QLabel(self.tabRGB)
        self.label_R.setGeometry(QtCore.QRect(20, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_R.setFont(font)
        self.label_R.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_R.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_R.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_R.setObjectName("label_R")
        self.label_G = QtWidgets.QLabel(self.tabRGB)
        self.label_G.setGeometry(QtCore.QRect(80, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_G.setFont(font)
        self.label_G.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_G.setStyleSheet("color: rgb(0, 235, 0);")
        self.label_G.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_G.setObjectName("label_G")
        self.lineEditRVal = QtWidgets.QLineEdit(self.tabRGB)
        self.lineEditRVal.setGeometry(QtCore.QRect(15, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditRVal.setFont(font)
        self.lineEditRVal.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditRVal.setObjectName("lineEditRVal")
        self.lineEditGVal = QtWidgets.QLineEdit(self.tabRGB)
        self.lineEditGVal.setGeometry(QtCore.QRect(75, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditGVal.setFont(font)
        self.lineEditGVal.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditGVal.setObjectName("lineEditGVal")
        self.lineEditBVal = QtWidgets.QLineEdit(self.tabRGB)
        self.lineEditBVal.setGeometry(QtCore.QRect(130, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditBVal.setFont(font)
        self.lineEditBVal.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditBVal.setObjectName("lineEditBVal")
        self.tabWidget_2.addTab(self.tabRGB, "")
        self.tabHSV = QtWidgets.QWidget()
        self.tabHSV.setAutoFillBackground(True)
        self.tabHSV.setObjectName("tabHSV")
        self.verticalSliderS = QtWidgets.QSlider(self.tabHSV)
        self.verticalSliderS.setGeometry(QtCore.QRect(80, 30, 22, 160))
        self.verticalSliderS.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderS.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderS.setAutoFillBackground(True)
        self.verticalSliderS.setMaximum(100)
        self.verticalSliderS.setPageStep(10)
        self.verticalSliderS.setProperty("value", 100)
        self.verticalSliderS.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderS.setInvertedAppearance(False)
        self.verticalSliderS.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderS.setTickInterval(5)
        self.verticalSliderS.setObjectName("verticalSliderS")
        self.verticalSliderV = QtWidgets.QSlider(self.tabHSV)
        self.verticalSliderV.setGeometry(QtCore.QRect(140, 30, 22, 160))
        self.verticalSliderV.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderV.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderV.setAutoFillBackground(True)
        self.verticalSliderV.setMaximum(100)
        self.verticalSliderV.setProperty("value", 100)
        self.verticalSliderV.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderV.setInvertedAppearance(False)
        self.verticalSliderV.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderV.setTickInterval(5)
        self.verticalSliderV.setObjectName("verticalSliderV")
        self.verticalSliderH = QtWidgets.QSlider(self.tabHSV)
        self.verticalSliderH.setGeometry(QtCore.QRect(20, 30, 22, 160))
        self.verticalSliderH.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderH.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderH.setAutoFillBackground(True)
        self.verticalSliderH.setMaximum(100)
        self.verticalSliderH.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderH.setInvertedAppearance(False)
        self.verticalSliderH.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderH.setTickInterval(5)
        self.verticalSliderH.setObjectName("verticalSliderH")
        self.label_S = QtWidgets.QLabel(self.tabHSV)
        self.label_S.setGeometry(QtCore.QRect(80, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_S.setFont(font)
        self.label_S.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_S.setStyleSheet("color: rgb(0, 255, 255);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 91, 91, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_S.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_S.setObjectName("label_S")
        self.label_H = QtWidgets.QLabel(self.tabHSV)
        self.label_H.setGeometry(QtCore.QRect(20, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_H.setFont(font)
        self.label_H.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_H.setStyleSheet("color: rgb(255, 255, 92);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.166 rgba(255, 255, 0, 255), stop:0.333 rgba(0, 255, 0, 255), stop:0.5 rgba(0, 255, 255, 255), stop:0.666 rgba(0, 0, 255, 255), stop:0.833 rgba(255, 0, 255, 255), stop:1 rgba(255, 0, 0, 255));")
        self.label_H.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_H.setObjectName("label_H")
        self.label_V = QtWidgets.QLabel(self.tabHSV)
        self.label_V.setGeometry(QtCore.QRect(140, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_V.setFont(font)
        self.label_V.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_V.setStyleSheet("color: rgb(255, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_V.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_V.setObjectName("label_V")
        self.lineEditVVal = QtWidgets.QLineEdit(self.tabHSV)
        self.lineEditVVal.setGeometry(QtCore.QRect(130, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditVVal.setFont(font)
        self.lineEditVVal.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditVVal.setObjectName("lineEditVVal")
        self.lineEditSVal = QtWidgets.QLineEdit(self.tabHSV)
        self.lineEditSVal.setGeometry(QtCore.QRect(75, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditSVal.setFont(font)
        self.lineEditSVal.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditSVal.setObjectName("lineEditSVal")
        self.lineEditHVal = QtWidgets.QLineEdit(self.tabHSV)
        self.lineEditHVal.setGeometry(QtCore.QRect(15, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditHVal.setFont(font)
        self.lineEditHVal.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditHVal.setObjectName("lineEditHVal")
        self.tabWidget_2.addTab(self.tabHSV, "")
        self.progressBar_4 = QtWidgets.QProgressBar(self.tabAdvanced)
        self.progressBar_4.setGeometry(QtCore.QRect(970, 0, 16, 396))
        self.progressBar_4.setProperty("value", 0)
        self.progressBar_4.setTextVisible(False)
        self.progressBar_4.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.progressBar_4.setInvertedAppearance(False)
        self.progressBar_4.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar_4.setObjectName("progressBar_4")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.tabAdvanced)
        self.commandLinkButton.setGeometry(QtCore.QRect(9, 0, 196, 56))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.commandLinkButton.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("C:\\Users\\ErMax\\Desktop\\pic2ascii\\GUI Code Qt6\\u232\\rva (don\'t touch unless, know wha yo doi\'n)\\../../../../../.designer/backup/x.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        icon1.addPixmap(QtGui.QPixmap("C:\\Users\\ErMax\\Desktop\\pic2ascii\\GUI Code Qt6\\u232\\rva (don\'t touch unless, know wha yo doi\'n)\\../../../../../.designer/backup/check.png"), QtGui.QIcon.Mode.Active, QtGui.QIcon.State.On)
        self.commandLinkButton.setIcon(icon1)
        self.commandLinkButton.setIconSize(QtCore.QSize(34, 34))
        self.commandLinkButton.setCheckable(True)
        self.commandLinkButton.setChecked(False)
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.tabAdvanced)
        self.lineEdit_3.setEnabled(True)
        self.lineEdit_3.setGeometry(QtCore.QRect(-3, -5, 361, 331))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setAutoFillBackground(False)
        self.lineEdit_3.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.lineEdit_3.setReadOnly(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButtonColor = QtWidgets.QPushButton(self.tabAdvanced)
        self.pushButtonColor.setEnabled(False)
        self.pushButtonColor.setGeometry(QtCore.QRect(210, 10, 136, 96))
        self.pushButtonColor.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButtonColor.setObjectName("pushButtonColor")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.tabAdvanced)
        self.lineEdit_4.setEnabled(True)
        self.lineEdit_4.setGeometry(QtCore.QRect(360, -5, 426, 331))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setAutoFillBackground(False)
        self.lineEdit_4.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.lineEdit_4.setReadOnly(True)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_5 = QtWidgets.QLabel(self.tabAdvanced)
        self.label_5.setGeometry(QtCore.QRect(370, 5, 186, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.tabWidget_3 = QtWidgets.QTabWidget(self.tabAdvanced)
        self.tabWidget_3.setEnabled(True)
        self.tabWidget_3.setGeometry(QtCore.QRect(385, 60, 241, 251))
        self.tabWidget_3.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.tabWidget_3.setAutoFillBackground(True)
        self.tabWidget_3.setTabPosition(QtWidgets.QTabWidget.TabPosition.South)
        self.tabWidget_3.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.tabWidget_3.setDocumentMode(False)
        self.tabWidget_3.setMovable(True)
        self.tabWidget_3.setObjectName("tabWidget_3")
        self.tabRGB_2 = QtWidgets.QWidget()
        self.tabRGB_2.setAutoFillBackground(True)
        self.tabRGB_2.setObjectName("tabRGB_2")
        self.verticalSliderR_2 = QtWidgets.QSlider(self.tabRGB_2)
        self.verticalSliderR_2.setGeometry(QtCore.QRect(20, 30, 22, 160))
        self.verticalSliderR_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderR_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderR_2.setAutoFillBackground(True)
        self.verticalSliderR_2.setMaximum(255)
        self.verticalSliderR_2.setProperty("value", 255)
        self.verticalSliderR_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderR_2.setInvertedAppearance(False)
        self.verticalSliderR_2.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderR_2.setTickInterval(10)
        self.verticalSliderR_2.setObjectName("verticalSliderR_2")
        self.verticalSliderG_2 = QtWidgets.QSlider(self.tabRGB_2)
        self.verticalSliderG_2.setGeometry(QtCore.QRect(80, 30, 22, 160))
        self.verticalSliderG_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderG_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderG_2.setAutoFillBackground(True)
        self.verticalSliderG_2.setMaximum(255)
        self.verticalSliderG_2.setProperty("value", 255)
        self.verticalSliderG_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderG_2.setInvertedAppearance(False)
        self.verticalSliderG_2.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderG_2.setTickInterval(10)
        self.verticalSliderG_2.setObjectName("verticalSliderG_2")
        self.verticalSliderB_2 = QtWidgets.QSlider(self.tabRGB_2)
        self.verticalSliderB_2.setGeometry(QtCore.QRect(140, 30, 22, 160))
        self.verticalSliderB_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderB_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderB_2.setAutoFillBackground(True)
        self.verticalSliderB_2.setMaximum(255)
        self.verticalSliderB_2.setProperty("value", 255)
        self.verticalSliderB_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderB_2.setInvertedAppearance(False)
        self.verticalSliderB_2.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderB_2.setTickInterval(10)
        self.verticalSliderB_2.setObjectName("verticalSliderB_2")
        self.label_B_2 = QtWidgets.QLabel(self.tabRGB_2)
        self.label_B_2.setGeometry(QtCore.QRect(140, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_B_2.setFont(font)
        self.label_B_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_B_2.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_B_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_B_2.setObjectName("label_B_2")
        self.label_R_2 = QtWidgets.QLabel(self.tabRGB_2)
        self.label_R_2.setGeometry(QtCore.QRect(20, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_R_2.setFont(font)
        self.label_R_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_R_2.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_R_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_R_2.setObjectName("label_R_2")
        self.label_G_2 = QtWidgets.QLabel(self.tabRGB_2)
        self.label_G_2.setGeometry(QtCore.QRect(80, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_G_2.setFont(font)
        self.label_G_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_G_2.setStyleSheet("color: rgb(0, 235, 0);")
        self.label_G_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_G_2.setObjectName("label_G_2")
        self.lineEditRVal_2 = QtWidgets.QLineEdit(self.tabRGB_2)
        self.lineEditRVal_2.setGeometry(QtCore.QRect(15, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditRVal_2.setFont(font)
        self.lineEditRVal_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditRVal_2.setObjectName("lineEditRVal_2")
        self.lineEditGVal_2 = QtWidgets.QLineEdit(self.tabRGB_2)
        self.lineEditGVal_2.setGeometry(QtCore.QRect(75, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditGVal_2.setFont(font)
        self.lineEditGVal_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditGVal_2.setObjectName("lineEditGVal_2")
        self.lineEditBVal_2 = QtWidgets.QLineEdit(self.tabRGB_2)
        self.lineEditBVal_2.setGeometry(QtCore.QRect(130, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditBVal_2.setFont(font)
        self.lineEditBVal_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditBVal_2.setObjectName("lineEditBVal_2")
        self.verticalSliderA = QtWidgets.QSlider(self.tabRGB_2)
        self.verticalSliderA.setGeometry(QtCore.QRect(195, 30, 22, 160))
        self.verticalSliderA.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderA.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderA.setAutoFillBackground(True)
        self.verticalSliderA.setMaximum(255)
        self.verticalSliderA.setProperty("value", 255)
        self.verticalSliderA.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderA.setInvertedAppearance(False)
        self.verticalSliderA.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderA.setTickInterval(10)
        self.verticalSliderA.setObjectName("verticalSliderA")
        self.lineEditAVal = QtWidgets.QLineEdit(self.tabRGB_2)
        self.lineEditAVal.setGeometry(QtCore.QRect(185, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditAVal.setFont(font)
        self.lineEditAVal.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditAVal.setObjectName("lineEditAVal")
        self.label_B_3 = QtWidgets.QLabel(self.tabRGB_2)
        self.label_B_3.setGeometry(QtCore.QRect(195, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_B_3.setFont(font)
        self.label_B_3.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_B_3.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_B_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_B_3.setObjectName("label_B_3")
        self.tabWidget_3.addTab(self.tabRGB_2, "")
        self.tabHSV_2 = QtWidgets.QWidget()
        self.tabHSV_2.setAutoFillBackground(True)
        self.tabHSV_2.setObjectName("tabHSV_2")
        self.verticalSliderS_2 = QtWidgets.QSlider(self.tabHSV_2)
        self.verticalSliderS_2.setGeometry(QtCore.QRect(80, 30, 22, 160))
        self.verticalSliderS_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderS_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderS_2.setAutoFillBackground(True)
        self.verticalSliderS_2.setMaximum(100)
        self.verticalSliderS_2.setPageStep(10)
        self.verticalSliderS_2.setProperty("value", 100)
        self.verticalSliderS_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderS_2.setInvertedAppearance(False)
        self.verticalSliderS_2.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderS_2.setTickInterval(5)
        self.verticalSliderS_2.setObjectName("verticalSliderS_2")
        self.verticalSliderV_2 = QtWidgets.QSlider(self.tabHSV_2)
        self.verticalSliderV_2.setGeometry(QtCore.QRect(140, 30, 22, 160))
        self.verticalSliderV_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderV_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderV_2.setAutoFillBackground(True)
        self.verticalSliderV_2.setMaximum(100)
        self.verticalSliderV_2.setProperty("value", 100)
        self.verticalSliderV_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderV_2.setInvertedAppearance(False)
        self.verticalSliderV_2.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderV_2.setTickInterval(5)
        self.verticalSliderV_2.setObjectName("verticalSliderV_2")
        self.verticalSliderH_2 = QtWidgets.QSlider(self.tabHSV_2)
        self.verticalSliderH_2.setGeometry(QtCore.QRect(20, 30, 22, 160))
        self.verticalSliderH_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderH_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderH_2.setAutoFillBackground(True)
        self.verticalSliderH_2.setMaximum(100)
        self.verticalSliderH_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderH_2.setInvertedAppearance(False)
        self.verticalSliderH_2.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderH_2.setTickInterval(5)
        self.verticalSliderH_2.setObjectName("verticalSliderH_2")
        self.label_S_2 = QtWidgets.QLabel(self.tabHSV_2)
        self.label_S_2.setGeometry(QtCore.QRect(80, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_S_2.setFont(font)
        self.label_S_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_S_2.setStyleSheet("color: rgb(0, 255, 255);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 91, 91, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_S_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_S_2.setObjectName("label_S_2")
        self.label_H_2 = QtWidgets.QLabel(self.tabHSV_2)
        self.label_H_2.setGeometry(QtCore.QRect(20, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_H_2.setFont(font)
        self.label_H_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_H_2.setStyleSheet("color: rgb(255, 255, 92);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.166 rgba(255, 255, 0, 255), stop:0.333 rgba(0, 255, 0, 255), stop:0.5 rgba(0, 255, 255, 255), stop:0.666 rgba(0, 0, 255, 255), stop:0.833 rgba(255, 0, 255, 255), stop:1 rgba(255, 0, 0, 255));")
        self.label_H_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_H_2.setObjectName("label_H_2")
        self.label_V_2 = QtWidgets.QLabel(self.tabHSV_2)
        self.label_V_2.setGeometry(QtCore.QRect(140, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_V_2.setFont(font)
        self.label_V_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_V_2.setStyleSheet("color: rgb(255, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_V_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_V_2.setObjectName("label_V_2")
        self.lineEditVVal_2 = QtWidgets.QLineEdit(self.tabHSV_2)
        self.lineEditVVal_2.setGeometry(QtCore.QRect(130, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditVVal_2.setFont(font)
        self.lineEditVVal_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditVVal_2.setObjectName("lineEditVVal_2")
        self.lineEditSVal_2 = QtWidgets.QLineEdit(self.tabHSV_2)
        self.lineEditSVal_2.setGeometry(QtCore.QRect(75, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditSVal_2.setFont(font)
        self.lineEditSVal_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditSVal_2.setObjectName("lineEditSVal_2")
        self.lineEditHVal_2 = QtWidgets.QLineEdit(self.tabHSV_2)
        self.lineEditHVal_2.setGeometry(QtCore.QRect(15, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditHVal_2.setFont(font)
        self.lineEditHVal_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditHVal_2.setObjectName("lineEditHVal_2")
        self.verticalSliderA_2 = QtWidgets.QSlider(self.tabHSV_2)
        self.verticalSliderA_2.setGeometry(QtCore.QRect(195, 30, 22, 160))
        self.verticalSliderA_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.SplitVCursor))
        self.verticalSliderA_2.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.verticalSliderA_2.setAutoFillBackground(True)
        self.verticalSliderA_2.setMaximum(100)
        self.verticalSliderA_2.setProperty("value", 100)
        self.verticalSliderA_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSliderA_2.setInvertedAppearance(False)
        self.verticalSliderA_2.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.verticalSliderA_2.setTickInterval(10)
        self.verticalSliderA_2.setObjectName("verticalSliderA_2")
        self.lineEditAVal_2 = QtWidgets.QLineEdit(self.tabHSV_2)
        self.lineEditAVal_2.setGeometry(QtCore.QRect(185, 195, 36, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditAVal_2.setFont(font)
        self.lineEditAVal_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditAVal_2.setObjectName("lineEditAVal_2")
        self.label_B_4 = QtWidgets.QLabel(self.tabHSV_2)
        self.label_B_4.setGeometry(QtCore.QRect(195, 10, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_B_4.setFont(font)
        self.label_B_4.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.label_B_4.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_B_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_B_4.setObjectName("label_B_4")
        self.tabWidget_3.addTab(self.tabHSV_2, "")
        self.pushButtonColor_2 = QtWidgets.QPushButton(self.tabAdvanced)
        self.pushButtonColor_2.setEnabled(False)
        self.pushButtonColor_2.setGeometry(QtCore.QRect(640, 10, 136, 96))
        self.pushButtonColor_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButtonColor_2.setObjectName("pushButtonColor_2")
        self.lineEdit_3.raise_()
        self.progressBar_4.raise_()
        self.commandLinkButton.raise_()
        self.tabWidget_2.raise_()
        self.pushButtonColor.raise_()
        self.lineEdit_4.raise_()
        self.label_5.raise_()
        self.tabWidget_3.raise_()
        self.pushButtonColor_2.raise_()
        self.tabWidget.addTab(self.tabAdvanced, "")
        self.tabFinnish = QtWidgets.QWidget()
        self.tabFinnish.setObjectName("tabFinnish")
        self.whatToDo = QtWidgets.QComboBox(self.tabFinnish)
        self.whatToDo.setGeometry(QtCore.QRect(5, 290, 241, 21))
        self.whatToDo.setEditable(False)
        self.whatToDo.setMaxVisibleItems(10)
        self.whatToDo.setDuplicatesEnabled(False)
        self.whatToDo.setFrame(True)
        self.whatToDo.setObjectName("whatToDo")
        self.whatToDo.addItem("")
        self.whatToDo.addItem("")
        self.whatToDo.addItem("")
        self.stop = QtWidgets.QPushButton(self.tabFinnish)
        self.stop.setGeometry(QtCore.QRect(5, 319, 111, 31))
        self.stop.setObjectName("stop")
        self.start = QtWidgets.QPushButton(self.tabFinnish)
        self.start.setGeometry(QtCore.QRect(135, 319, 111, 31))
        self.start.setAutoFillBackground(False)
        self.start.setStyleSheet("")
        self.start.setObjectName("start")
        self.progressBar = QtWidgets.QProgressBar(self.tabFinnish)
        self.progressBar.setGeometry(QtCore.QRect(5, 369, 966, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.progressBar.setFont(font)
        self.progressBar.setStyleSheet("")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.widget = QtWidgets.QWidget(self.tabFinnish)
        self.widget.setGeometry(QtCore.QRect(260, 5, 716, 361))
        self.widget.setObjectName("widget")
        self.textBrowser = QtWidgets.QTextBrowser(self.widget)
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 256, 192))
        self.textBrowser.setObjectName("textBrowser")
        self.tabWidget.addTab(self.tabFinnish, "")
        MainWindow.setCentralWidget(self.widgetMain)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 985, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setAutoFillBackground(False)
        self.statusbar.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:0.21, stop:0 rgba(70, 70, 0, 255), stop:0.278409 rgba(106, 106, 106, 255), stop:1 rgba(255, 255, 255, 255));\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:0.21, stop:0 rgba(153, 153, 153, 255), stop:0.278409 rgba(210, 210, 210, 255), stop:1 rgba(255, 255, 255, 255));")
        self.statusbar.setSizeGripEnabled(False)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtGui.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionAbout_Pic2Ascii = QtGui.QAction(MainWindow)
        self.actionAbout_Pic2Ascii.setObjectName("actionAbout_Pic2Ascii")
        self.actionContact = QtGui.QAction(MainWindow)
        self.actionContact.setObjectName("actionContact")
        self.actionReport_an_Erorr = QtGui.QAction(MainWindow)
        self.actionReport_an_Erorr.setObjectName("actionReport_an_Erorr")
        self.actionRequest_a_Feature = QtGui.QAction(MainWindow)
        self.actionRequest_a_Feature.setObjectName("actionRequest_a_Feature")
        self.actionLicence = QtGui.QAction(MainWindow)
        self.actionLicence.setObjectName("actionLicence")
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionContact)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionReport_an_Erorr)
        self.menuHelp.addAction(self.actionRequest_a_Feature)
        self.menuAbout.addAction(self.actionAbout_Pic2Ascii)
        self.menuAbout.addAction(self.actionLicence)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget_2.setCurrentIndex(0)
        self.tabWidget_3.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ErMax.Inc-Pic2Ascii"))
        self.label.setText(_translate("MainWindow", "Welcome!"))
        self.label_2.setText(_translate("MainWindow", "Choose Setup to begin,"))
        self.label_3.setText(_translate("MainWindow", "or select Help! for help."))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:20pt;\">Release Notes</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt;\">pic2ascii is an open source app run by the ErMax.Inc comunity. Pic2ascii can turn regular pictures into ascii characters with detail (or no detail) and </span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#ff0000;\">c</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#ffaa00;\">o</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#a2a200;\">l</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#00aa00;\">o</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#0055ff;\">r</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#aa00ff;\">. </span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#000000;\">You can also control various peramitars like the scale factor of the characters, the font and even the characters themself. At the moment, pic2ascii only suports the .jpg as an input format and both jpg and .png as an output format but that may change in the future. For now please enjoy the comunity\'s software.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Yu Gothic UI\'; font-size:8.25pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#000000;\">    --ErMax Team</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabHome), _translate("MainWindow", "Home"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tabHome), _translate("MainWindow", "This is the Home Tab"))
        self.labelinDesk.setToolTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.labelinDesk.setStatusTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.labelinDesk.setText(_translate("MainWindow", "Input Image/Image Sequence:"))
        self.lineEditInDir.setToolTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.lineEditInDir.setStatusTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.pushButtonImageIn.setToolTip(_translate("MainWindow", "The dir of Where Your Original Image is Located"))
        self.pushButtonImageIn.setStatusTip(_translate("MainWindow", "The dir of Where Your Original Image is Located"))
        self.pushButtonImageIn.setText(_translate("MainWindow", "Browse (Image/Image Sequance)"))
        self.labelOutDesk.setToolTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.labelOutDesk.setStatusTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.labelOutDesk.setText(_translate("MainWindow", "Output Folder Image/Image Sequence:"))
        self.lineEditOutDir.setToolTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.lineEditOutDir.setStatusTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.pushButtonFolderOut.setToolTip(_translate("MainWindow", "The dir of Where your Output Image is Located"))
        self.pushButtonFolderOut.setStatusTip(_translate("MainWindow", "The dir of Where your Output Image is Located"))
        self.pushButtonFolderOut.setText(_translate("MainWindow", "Browse (Folder)"))
        self.labelFormatOut.setText(_translate("MainWindow", "Output Image Formats (Supported):"))
        self.comboBoxFormatOut.setItemText(0, _translate("MainWindow", "PNG (Default)"))
        self.comboBoxFormatOut.setItemText(1, _translate("MainWindow", "JPG"))
        self.comboBoxFormatOut.setItemText(2, _translate("MainWindow", "TXT (Text File)"))
        self.spinDialScaleFactor.setToolTip(_translate("MainWindow", "Dial"))
        self.lineEditSF.setText(_translate("MainWindow", "0.05"))
        self.labelSF.setText(_translate("MainWindow", "ASCII Character Scale Factor"))
        self.lineEditFont.setToolTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.lineEditFont.setStatusTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.pushButtonFontIn.setText(_translate("MainWindow", "Browse Font File"))
        self.Fontlabel.setToolTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.Fontlabel.setStatusTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.Fontlabel.setText(_translate("MainWindow", "Font:"))
        self.lineEdit.setToolTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.lineEdit.setStatusTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.coreLabel.setText(_translate("MainWindow", "CPU Processes:"))
        self.lineEdit_2.setToolTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.lineEdit_2.setStatusTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.checkBoxAutoProcess.setText(_translate("MainWindow", "Auto"))
        self.lineEditProcess.setText(_translate("MainWindow", "1"))
        self.lineEditChar.setText(_translate("MainWindow", "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\"^`\'."))
        self.label_4.setText(_translate("MainWindow", "Characters (bright to dark):"))
        self.labelCharHeight.setText(_translate("MainWindow", "CharHeight:"))
        self.label_6.setText(_translate("MainWindow", "CharWidth:"))
        self.lineEditCharWidth.setText(_translate("MainWindow", "10"))
        self.lineEditCharHeight.setText(_translate("MainWindow", "18"))
        self.pushButtonCharWidthReset.setText(_translate("MainWindow", "↺"))
        self.pushButtonCharHeightReset.setText(_translate("MainWindow", "↺"))
        self.pushButtonCharReset.setText(_translate("MainWindow", "↺"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabSetup), _translate("MainWindow", "Setup"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tabSetup), _translate("MainWindow", "This is where you setup the source and ouput"))
        self.label_B.setText(_translate("MainWindow", "B"))
        self.label_R.setText(_translate("MainWindow", "R"))
        self.label_G.setText(_translate("MainWindow", "G"))
        self.lineEditRVal.setText(_translate("MainWindow", "255"))
        self.lineEditGVal.setText(_translate("MainWindow", "255"))
        self.lineEditBVal.setText(_translate("MainWindow", "255"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tabRGB), _translate("MainWindow", "RGB"))
        self.label_S.setText(_translate("MainWindow", "S"))
        self.label_H.setText(_translate("MainWindow", "H"))
        self.label_V.setText(_translate("MainWindow", "V"))
        self.lineEditVVal.setText(_translate("MainWindow", "100"))
        self.lineEditSVal.setText(_translate("MainWindow", "100"))
        self.lineEditHVal.setText(_translate("MainWindow", "0"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tabHSV), _translate("MainWindow", "HSV"))
        self.commandLinkButton.setText(_translate("MainWindow", "Monochrome"))
        self.pushButtonColor.setText(_translate("MainWindow", "Color Preview/Selector"))
        self.label_5.setText(_translate("MainWindow", "Background Color"))
        self.label_B_2.setText(_translate("MainWindow", "B"))
        self.label_R_2.setText(_translate("MainWindow", "R"))
        self.label_G_2.setText(_translate("MainWindow", "G"))
        self.lineEditRVal_2.setText(_translate("MainWindow", "255"))
        self.lineEditGVal_2.setText(_translate("MainWindow", "255"))
        self.lineEditBVal_2.setText(_translate("MainWindow", "255"))
        self.lineEditAVal.setText(_translate("MainWindow", "255"))
        self.label_B_3.setText(_translate("MainWindow", "A"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tabRGB_2), _translate("MainWindow", "RGB"))
        self.label_S_2.setText(_translate("MainWindow", "S"))
        self.label_H_2.setText(_translate("MainWindow", "H"))
        self.label_V_2.setText(_translate("MainWindow", "V"))
        self.lineEditVVal_2.setText(_translate("MainWindow", "100"))
        self.lineEditSVal_2.setText(_translate("MainWindow", "100"))
        self.lineEditHVal_2.setText(_translate("MainWindow", "0"))
        self.lineEditAVal_2.setText(_translate("MainWindow", "100"))
        self.label_B_4.setText(_translate("MainWindow", "A"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tabHSV_2), _translate("MainWindow", "HSV"))
        self.pushButtonColor_2.setText(_translate("MainWindow", "Color Preview/Selector"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabAdvanced), _translate("MainWindow", "Advanced"))
        self.whatToDo.setItemText(0, _translate("MainWindow", "Do Nothing When Finished (Default)"))
        self.whatToDo.setItemText(1, _translate("MainWindow", "Close Window When Finished"))
        self.whatToDo.setItemText(2, _translate("MainWindow", "Shutdown PC (Windows only)"))
        self.stop.setText(_translate("MainWindow", "Stop"))
        self.start.setText(_translate("MainWindow", "Start"))
        self.progressBar.setFormat(_translate("MainWindow", "%p% ((var) Pictures)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabFinnish), _translate("MainWindow", "Finnish"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help!"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setStatusTip(_translate("MainWindow", "This exits the program"))
        self.actionAbout_Pic2Ascii.setText(_translate("MainWindow", "About Pic2Ascii"))
        self.actionContact.setText(_translate("MainWindow", "Contact"))
        self.actionReport_an_Erorr.setText(_translate("MainWindow", "Report an Erorr!"))
        self.actionRequest_a_Feature.setText(_translate("MainWindow", "Request a Feature"))
        self.actionLicence.setText(_translate("MainWindow", "Licence"))



#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
        
   
############################################################################################################

        #Edits ##we put this here to help us later when biulding a later GUI version
        self.pushButtonImageIn.clicked.connect(lambda:call_atrib.InputFileLoc())
        self.pushButtonImageIn.clicked.connect(lambda:call_atrib.autobutton())
        self.pushButtonFolderOut.clicked.connect(lambda:call_atrib.OutImgFolder())
        self.pushButtonFontIn.clicked.connect(lambda:call_atrib.fnt_loc())
        self.spinDialScaleFactor.valueChanged.connect(lambda:call_atrib.dialSF())
        self.lineEditSF.textChanged.connect(lambda:call_atrib.editSF())
        self.actionReport_an_Erorr.triggered.connect(lambda:self.win_browser())
        self.start.clicked.connect(lambda:call_pta.pg())
        self.lineEditProcess.textChanged.connect(lambda:call_atrib.EditProcesses())
        self.checkBoxAutoProcess.stateChanged.connect(lambda:call_atrib.autobutton())
        self.actionRequest_a_Feature.triggered.connect(lambda:call_actions.gt2())
        self.lineEditCharWidth.textChanged.connect(lambda:call_atrib.charsize(True))
        self.lineEditCharHeight.textChanged.connect(lambda:call_atrib.charsize(False))
        self.pushButtonCharWidthReset.clicked.connect(lambda:call_atrib.reset('w'))
        self.pushButtonCharHeightReset.clicked.connect(lambda:call_atrib.reset('h'))
        self.pushButtonCharReset.clicked.connect(lambda:call_atrib.reset('c'))
        self.commandLinkButton.clicked.connect(lambda:call_atrib.commandlinking())
        ##
        #sliders
        ##
        self.verticalSliderR.valueChanged.connect(lambda:call_atrib.slideChangeRGB(self.verticalSliderR, self.lineEditRVal))
        self.verticalSliderG.valueChanged.connect(lambda:call_atrib.slideChangeRGB(self.verticalSliderG, self.lineEditGVal))
        self.verticalSliderB.valueChanged.connect(lambda:call_atrib.slideChangeRGB(self.verticalSliderB, self.lineEditBVal))
        self.verticalSliderR_2.valueChanged.connect(lambda:call_atrib.slideChangeRGB(self.verticalSliderR_2, self.lineEditRVal_2))
        self.verticalSliderG_2.valueChanged.connect(lambda:call_atrib.slideChangeRGB(self.verticalSliderG_2, self.lineEditGVal_2))
        self.verticalSliderB_2.valueChanged.connect(lambda:call_atrib.slideChangeRGB(self.verticalSliderB_2, self.lineEditBVal_2))
        self.verticalSliderA.valueChanged.connect(lambda:call_atrib.slideChangeRGB(self.verticalSliderA, self.lineEditAVal))
        ##
        #lines
        self.lineEditRVal.textChanged.connect(lambda:call_atrib.lineChangeRGB(self.lineEditRVal, self.verticalSliderR))
        self.lineEditGVal.textChanged.connect(lambda:call_atrib.lineChangeRGB(self.lineEditGVal, self.verticalSliderG))
        self.lineEditBVal.textChanged.connect(lambda:call_atrib.lineChangeRGB(self.lineEditBVal, self.verticalSliderB))
        self.lineEditRVal_2.textChanged.connect(lambda:call_atrib.lineChangeRGB(self.lineEditRVal_2, self.verticalSliderR_2))
        self.lineEditGVal_2.textChanged.connect(lambda:call_atrib.lineChangeRGB(self.lineEditGVal_2, self.verticalSliderG_2))
        self.lineEditBVal_2.textChanged.connect(lambda:call_atrib.lineChangeRGB(self.lineEditBVal_2, self.verticalSliderB_2))
        self.lineEditAVal.textChanged.connect(lambda:call_atrib.lineChangeRGB(self.lineEditAVal, self.verticalSliderA))


#############################################################################################################
#window (from fine imports)
#############################################################################################################




    def win_browser(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = reis.Ui_ReportWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        
        #button linking

        self.ui.pushButtonGitHub.clicked.connect(lambda:call_actions.GitHub())
        self.ui.pushButtonMsForms.clicked.connect(lambda:call_actions.MsForms())

#############################################################################################################
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
######################################


class autostart:
    def auto(self):
        ui.checkBoxAutoProcess.setChecked(True)


class dtet():
    #delete func once done with program
    def test_msg(self):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.showinfo('worked', str('it worked'))

        root.deiconify()
        root.destroy()
        root.quit()
        del root

class actions:
    def gt2(self):
        try:
            webbrowser.open('https://gitlab.com/ermax-inc/pic2ascii/-/issues/new')
        except:
            call_error.report_error()
    
    
    def GitHub(self):
        try:
            webbrowser.open('https://gitlab.com/ermax-inc/pic2ascii/-/issues/new')
        except:
            call_error.report_error()
        ui.window.close()
    
        
    def MsForms(self):
        try:
            webbrowser.open('https://forms.office.com/Pages/ResponsePage.aspx?id=DQSIkWdsW0yxEjajBLZtrQAAAAAAAAAAAAZAAP6tCSRUOEJOMDczWjlJMURGME8wNTBIMEtTQ0ZSSi4u')
        except:
            call_error.report_error()
        ui.window.close()

class atrib(Ui_MainWindow):
    def InputFileLoc(self):
        
        winslash = str(os.sep)

        fileman = Tk()
        fileman.withdraw()
        fileman.attributes('-alpha', 0)
        global file_path_list
        
        file_path_list = askopenfilenames(filetypes=(("JPEG/JPG files","*.jpeg *.jpg"),), title='Select All Pictures to Ascii.')
        file_path_list = list(file_path_list)

        fileman.deiconify()
        fileman.destroy()
        fileman.quit()

        if file_path_list:
            ui.lineEditInDir.setText(str(file_path_list[0].replace('/', str(winslash))))
            self.EditProcesses()

    def OutImgFolder(self):
        if int(os.name.lower().find('nt')) != int(-1):
            winslash = str('\\')
        else:
            winslash = str('/')

        folderman = Tk()
        folderman.withdraw()
        folderman.attributes('-alpha', 0)
        global folder_out_path
        #initialdir='/'
        folder_out_path = askdir(title='Select Ascii Image Output Folder',)

        if folder_out_path:
            try:
                ui.lineEditOutDir.setText(str(folder_out_path.replace('/', str(winslash))))
            except:
                call_error.invalid_img_type()
            else:
                folderman.deiconify()
                folderman.destroy()
                folderman.quit()

######################################################################################################    

    def fnt_loc(self):
        
        if int(os.name.lower().find('nt')) != int(-1):
            winslash = str('\\')
        else:
            winslash = str('/')
        
        fntman = Tk()
        fntman.withdraw()
        fntman.attributes('-alpha', 0)
        global fnt_path
        fnt_path = askopenfilename(filetypes=(("TrueType Font Files","*.ttf *.tte *.ttc"), ("OpenType Font Files","*.otf *.otc"), ("All Font Files", "*.ttf *.ttc *.tte *.otf *.otc")), initialdir=str(os.getcwd() + winslash + 'fnts'), title='Choose Your Ascii Font')
        if fnt_path:
            global pre_fnt
            ui.lineEditFont.setText(str(fnt_path))
            pre_fnt = str(fnt_path)
        fntman.deiconify()
        fntman.destroy()
        fntman.quit()
    
##########################################################################################
        
    def dialSF(self):
        sfd_val = float(ui.spinDialScaleFactor.value() / 100)
        ui.lineEditSF.setText(str(sfd_val))
        del sfd_val
        #print(ui.lineEditSF.text())
      
    def editSF(self):
        def diddle():
            sleep(3.5)
            if not bool(ui.lineEditSF.displayText()):
                ui.lineEditSF.setText('.09')
        try:
            float(ui.lineEditSF.text())
        except:
            ui.lineEditSF.backspace()
        else:
            ui.spinDialScaleFactor.setValue(int(float(ui.lineEditSF.text()) * 100))
        if not bool(ui.lineEditSF.displayText()):
            bst = Thread(target=diddle)
            bst.start()
            del bst
        elif float(ui.lineEditSF.text()) >= int(1):
            ui.lineEditSF.setText('1')

        #get the value of the edit widget
        #and change the dial
        #ui.spinDialScaleFactor

##########################################################################################


    def EditProcesses(self):
        def diddle():
            sleep(float(3.5))
            if not bool(ui.lineEditProcess.displayText()):
                    ui.lineEditProcess.setText(str(1))
        global processes
        try:
            processes = int(ui.lineEditProcess.text())
        except:
            ui.lineEditProcess.backspace()
        else:
            if processes <= int(0):
                ui.lineEditProcess.backspace()
        if file_path_list:
            if processes > len(file_path_list):
                ui.lineEditProcess.setText(str(len(file_path_list)))
            
        if not bool(ui.lineEditProcess.displayText()):
            bst = Thread(target=diddle)
            bst.start()
            del bst

    def autobutton(self):
        if ui.checkBoxAutoProcess.isChecked():
            ui.lineEditProcess.setText(str(int(psutil.cpu_count(False) + math.floor(int(psutil.cpu_count(False) / 2)))))
            ui.lineEditProcess.setEnabled(False)
        elif ui.checkBoxAutoProcess.isChecked() == False:
            ui.lineEditProcess.setEnabled(True)


##################################################################################
            
    def charsize(self, width):
        if width:
            if str(ui.lineEditCharWidth.text()).find('-') != int(-1):
                ui.lineEditCharWidth.backspace()
            if isInt(ui.lineEditCharWidth.text()):
                if int(ui.lineEditCharWidth.text()) <= 0:
                    ui.lineEditCharWidth.backspace()
            else:
                if ui.lineEditCharWidth.text() == '':
                    pass
                else:
                    ui.lineEditCharWidth.backspace()
        
        elif width == False:
            if str(ui.lineEditCharHeight.text()).find('-') != int(-1):
                ui.lineEditCharHeight.backspace()
            if isInt(ui.lineEditCharHeight.text()):
                if int(ui.lineEditCharHeight.text()) <= 0:
                    ui.lineEditCharHeight.backspace()
            else:
                if ui.lineEditCharHeight.text() == '':
                    pass
                else:
                    ui.lineEditCharHeight.backspace()

#######################################################################################
    
    def reset(self, line):
        if str(line).find('w') != int(-1):
            ui.lineEditCharWidth.setText('10')
        elif str(line).find('h') != int(-1):
            ui.lineEditCharHeight.setText('18')
        elif str(line).find('c') != int(-1):
            ui.lineEditChar.setText('$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`\'.')

#####################################################################################

    def commandlinking(self):
        if ui.commandLinkButton.isChecked():
            call_enable_disable.commandShow()
        elif ui.commandLinkButton.isChecked() == False:
            call_enable_disable.commandHide()

################################################################################

    def slideChangeRGB(self, slide, line):
        line.setText(str(slide.value()))

    
    def lineChangeRGB(self, line, slide):
        def leen():
            sleep(2.5)
            line.setText('0')
        if any(c in str(line.text()) for c in '.-'):
            line.backspace()
        if isInt(line.text()):
            if int(line.text()) > 255:
                line.setText('255')
            elif int(line.text()) < 0:
                line.setText('0')
            slide.setValue(int(line.text()))
        else:
            if line.text() == '':
                s = Thread(target=leen)
                s.start()
                del s
            else:
                line.backspace()
        


################################################################################

class error:
    #Note:
    #This class is probably the least maintained class of them all
    #
    def invalid_dir(self, x):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.showerror('Invalid Directory', str('For Some Reason The Directory \'%s\' is invalid' % x))

        root.deiconify()
        root.destroy()
        root.quit()
        del root
    
    def invalid_img_type(self):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.showerror('Not suppored Image type', str('This image type is not valid!\nThe only valid image types are .jpg and .jpeg'))

        root.deiconify()
        root.destroy()
        root.quit()
        del root

    def report_error(self):
        #fix this later
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.askquestion(title='Web Browser Error', message=str('For some reason your web browser could not load!'))

        root.deiconify()
        root.destroy()
        root.quit()
        del root

    def sf_error(self):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.showerror('SF_Error', 'dial and line are not equal!')

        root.deiconify()
        root.destroy()
        root.quit()
        del root

class exiting:
    def message(self):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        exitprompt = messagebox.askyesno(title='Exit?', message='Are Sure You Want to Exit?')
        if int(exitprompt) == 1:
            root.deiconify()
            root.destroy()
            root.quit()
            del exitprompt
            del root
            return True
        elif int(exitprompt) == 0:
            root.deiconify()
            root.destroy()
            root.quit()
            del exitprompt
            del root
            return False
    


class enable_disable:
    def stathide(self):
        ui.lineEditChar.setEnabled(False)
        ui.whatToDo.setEnabled(False)
        ui.start.setEnabled(False)
        ui.spinDialScaleFactor.setEnabled(False)
        ui.lineEditSF.setEnabled(False)
        ui.pushButtonFontIn.setEnabled(False)
        ui.pushButtonImageIn.setEnabled(False)
        ui.pushButtonFolderOut.setEnabled(False)
        ui.comboBoxFormatOut.setEnabled(False)
        ui.lineEditProcess.setEnabled(False)
        ui.radioButtonRGB.setEnabled(False)
        ui.radioButtonBW.setEnabled(False)
        ui.checkBoxAutoProcess.setEnabled(False)

    def statshow(self):
        ui.lineEditChar.setEnabled(True)
        ui.whatToDo.setEnabled(True)
        ui.start.setEnabled(True)
        ui.spinDialScaleFactor.setEnabled(True)
        ui.lineEditSF.setEnabled(True)
        ui.pushButtonFontIn.setEnabled(True)
        ui.pushButtonImageIn.setEnabled(True)
        ui.pushButtonFolderOut.setEnabled(True)
        ui.comboBoxFormatOut.setEnabled(True)
        ui.lineEditProcess.setEnabled(True)
        ui.radioButtonRGB.setEnabled(True)
        ui.radioButtonBW.setEnabled(True)
        ui.checkBoxAutoProcess.setEnabled(True)

########################################################

    def commandShow(self):
        ui.tabWidget_2.setEnabled(True)
        ui.pushButtonColor.setEnabled(True)

    def commandHide(self):
        ui.tabWidget_2.setDisabled(True)
        ui.pushButtonColor.setDisabled(True)


#########################################################

class pta:
    def updatewindow(self, iterated):
        print(__name__)
        ui.progressBar_3.setValue(int(iterated))
        ui.progressBar_4.setValue(int(iterated))
        ui.progressBar.setValue(int(iterated))
        ui.progressBar_2.setValue(int(iterated))
    
    def getMonochrome(self, rgb_color, rgb_value):
        r, g, b = tuple(rgb_color)
        rgb_temp = colorsys.rgb_to_hsv(r, g, b)
    
    def getChar(self, inputInt):
        #chars = '''$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`'. '''[::-1]
        chars = str(ui.lineEditChar.text())

        charArray = list(chars)
        charLength = len(charArray)
        interval = charLength/256
        return charArray[math.floor(inputInt*interval)]
    
    def main(self, execing, file_path_list, folder_out_path, pre_fnt, scaleFactor, processes, monochrome, iteral):
        #chars = '''$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`'. '''[::-1]
        chars = str(ui.lineEditChar.text())

        charArray = list(chars)
        charLength = len(charArray)
        interval = charLength/256
        oneCharWidth = 10
        oneCharHeight = 18
        
        ##
        iterated = 0
        ##
        if float(ui.lineEditSF.text()) != float(ui.spinDialScaleFactor.value() / 100):
            print(float(ui.lineEditSF.text()))
            print(float(ui.spinDialScaleFactor.value() / 100))
            call_error.sf_error()
            raise ValueError('something went wrong, please restart application')
        
        #scaleFactor = 0.09

        #fileman = Tk()
        #fileman.wm_state('iconic')
        #file_path_list = askopenfilenames(filetypes=(("JPEG/JPG files","*.jpeg *.jpg"), ("PNG files (in beta)", "*.png"), ("Any file", "*")), title='Select pictures.')  #initialdir="/"
        ##fileman.mainloop()
        #file_path_list = list(file_path_list)
        #if not file_path_list:
        #    print('you have no files selected')
        #    sleep(.5)
        #    print('exiting')
        #    sleep(.2)
        #    exit()
        #else:
            #this variable (x) is a preuse of the while loop. We will keep this variable for future purposes
        x = 0
        if str(os.name) == 'nt':
            dirslash = '\\'
        else:
            dirslash = '/'
            
        print('starting...', end='\n\n')
        for file in file_path_list:
                
            im = PIL.Image.open(file_path_list[int(x)])
            if file_path_list[int(x)][-4] == '.' and file_path_list[int(x)][-3] == 'p' and file_path_list[int(x)][-2] == 'n' and file_path_list[int(x)][-1] == 'g':
                format = 'RGBA'
            else:
                format = 'RGB'
            #print(str(os.getcwd() + os.sep() + 'font' + os.sep() + 'anonymouspro.ttf'))
            fnt = ImageFont.truetype(str(os.getcwd() + os.sep + 'font' + os.sep + 'anonymouspro.ttf'), 15)

            width, height = im.size
            im = im.resize((int(scaleFactor*width), int(scaleFactor*height*(oneCharWidth/oneCharHeight))), PIL.Image.NEAREST)
            width, height = im.size
            pix = im.convert(str(format))

            outputImage = PIL.Image.new(str(format), (oneCharWidth * width, oneCharHeight * height), color = (0, 0, 0, 255))

            d = ImageDraw.Draw(outputImage)
                
            if os.path.isdir(str(folder_out_path) + str(dirslash) + 'outputTextFiles') == bool(False):
                os.mkdir(str(folder_out_path) + str(dirslash) + 'outputTextFiles')
            if os.path.isdir(str(folder_out_path) + str(dirslash) + 'outputPictureFiles') == bool(False):
                os.mkdir(str(folder_out_path) + str(dirslash) + 'outputPictureFiles')
            if os.path.isdir(str(folder_out_path) + str(dirslash) + 'outputTF') == bool(False):
                os.mkdir(str(folder_out_path) + str(dirslash) + 'outputTF')

            tf = open(str(folder_out_path) + str(dirslash) + 'outputTF' + str(dirslash) + str(int(x + 1)) + '.txt', "wb+")
            text_file = open(str(folder_out_path) + str(dirslash) + 'outputTextFiles' + str(dirslash) + str(f"Output{int(x) + int(1)}.txt"), "wb+")
            
            for i in range(height):
                for j in range(width):
                    if format == 'RGBA':
                        r, g, b, a = pix.getpixel((j, i))
                    elif format == 'RGB':
                        r, g, b = pix.getpixel((j, i))
                    #r, g, b = pix[j, i]
                    h = int(r/3 + g/3 + b/3)
                    #pix.getpixel((j, i)) = (h, h, h)#line no work nomore
                    text_file.write(str(self.getChar(h)).encode('utf-8'))
                    tf.write(str(str(fg(r, g, b)) + str(self.getChar(h))).encode('utf-8'))
                    #
                    ##  add this in as soon as the monochrome function/module is implemented
                    ###
                    ####if monochrome:
                    ####    mr, mg, mb = getMonochrome((r, g, b), h)
                    ###
                    ##
                    #
                    if format == 'RGBA':
                        d.text((math.ceil(int(j*oneCharWidth)), math.ceil(int(i*oneCharHeight))), self.getChar(h), font = fnt, fill = (int(r), int(g), int(b), int(a)))
                    elif format == 'RGB':
                        d.text((math.ceil(int(j*oneCharWidth)), math.ceil(int(i*oneCharHeight))), self.getChar(h), font = fnt, fill = (int(r), int(g), int(b)))
                    try:
                        print(fg(r, g, b) + str(self.getChar(h)), end='') #please don't put fg.rs into the code or it will slow down a lot
                    except:
                        #try:
                        #    print(str(self.getChar(h)), end='')
                        #except:
                        #    print('?', end='')
                        pass
                tf.write('\n'.encode('utf-8'))
                text_file.write('\n'.encode('utf-8'))
            text_file.close()
            tf.close()
            iterated += float(iteral)
            if isInt(iterated):
                ui.progressBar_3.setValue(int(iterated))
                ui.progressBar_4.setValue(int(iterated))
                ui.progressBar.setValue(int(iterated))
                ui.progressBar_2.setValue(int(iterated))
                print('\n', ui.progressBar_2.value())
                print(ui)
            x += int(1)
            outputImage.save(str(folder_out_path) + str(dirslash) + 'outputPictureFiles' + str(dirslash) + 'output' + str(x) + '_' + str(execing) + '.png')
            if int(execing + 1) == int(processes) and int(x) == len(file_path_list):
                pass
            if int(len(file_path_list)) >= int(x + 1):
                print(f'{fg.rs}\n\nImage {x} is done, going to next image\n\n')
    #try:shutil.rmtree(str(os.getcwd()) + str(os.sep) + 'pic2asciitemp')
    #except:pass
    
    def pg(self):
        if __name__ == '__main__':
            #in the future, please use the commeted forloop
            #for execing in range(whatever the process/core variable is):
            #call_exiting.stathide()     we will comment this out untill we can get a reliable way of un hiding
            iteral = float(100/len(file_path_list))
            picgen.lols(list(file_path_list), int(processes))
            for execing in range(int(processes)):
            #for execing in range(int(1)):
                with open(str(os.getcwd()) + str(os.sep) + 'pic2asciitemp' + str(os.sep) + str(int(execing + int(1))) + str(os.sep) + 'tmp.tmp', 'r') as dumpclutchprocs:
                    file_path_list2 = dumpclutchprocs.read().split(', ')
                del dumpclutchprocs
                pta_ps = Process(target=self.main, args=(int(execing), list(file_path_list2), str(folder_out_path), str(pre_fnt), float(str(ui.lineEditSF.text())), int(processes), bool(ui.commandLinkButton.isChecked()), iteral))
                #pta_ps = Process(target=self.main(int(execing), list(file_path_list2), str(folder_out_path), str(pre_fnt), float(str(ui.lineEditSF.text())), int(processes), bool(ui.commandLinkButton.isChecked()), iteral))
                pta_ps.start()
                #I did some reaserch and figured out that .join() is for allready (not in function) tasks

#class debunks
call_enable_disable = enable_disable()
call_atrib = atrib()
call_error = error()
call_dtet = dtet()
call_actions = actions()
call_exiting = exiting()
call_pta = pta()
call_autostart = autostart()

if __name__ == "__main__":
    call_autostart.auto()
    def mtrest():       
        MainWindow.show()
        try:
            sys.exit(app.exec())
        except SystemExit:
            MainWindow.show()
            estsx = call_exiting.message()
            if estsx == bool(True):
                MainWindow.close()
            elif estsx == bool(False):
                the_other_one()
            else:
                pass
            
    def the_other_one():
        MainWindow.show()
        try:
            sys.exit(app.exec())
        except SystemExit:
            MainWindow.show()
            estsx = call_exiting.message()
            if estsx == bool(True):
                MainWindow.close()
            elif estsx == bool(False):
                estsx = None
                mtrest()
            else:
                pass
    #app = QtWidgets.QApplication(sys.argv)
    
    
    MainWindow.show()
    #please don't set arg val to true as it will skrew [with a k] things up

    try:
        sys.exit(app.exec())
    except SystemExit:
        MainWindow.show()
        estsx = call_exiting.message()
        if estsx == bool(True):
           MainWindow.close()
        elif estsx == bool(False):
            estsx = None
            mtrest()
        else:
            pass
