# Form implementation generated from reading ui file 'rva.ui'
#
# Created by: PyQt6 UI code generator 6.0.3
#
# Edited by: ErMax
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.



#The License GNU (GPL) v3.0
#goes here

#IMPORTANT TO NOTE

#THE FINE IMPORTS

#Self Made

import more

#Important
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget, QApplication
import webbrowser
import sys
import reis
from tqdm import tqdm
#pta class imports (fine imports)


#NOTE: You are responcible for installing all of the depencancies if you want this to work
    #PIL is the new Pillow Library
#####
#!#from sty import fg, rs
#!#import PIL
from PIL import ImageDraw, ImageFont
import PIL
#####
import math
from time import sleep

#all (fine imports)
from platform import platform
import os
from subprocess import Popen

#call_atrib and error (fine imports)
from tkinter.filedialog import askdirectory as askdir
from tkinter.filedialog import askopenfilenames, askopenfilename
from tkinter import *
from tkinter import messagebox

from sty import fg
#global sys var

#def winslash():
#    if int(os.name.lower().find('nt')) != int(-1):
#        fwinslash = str('\\')
#    else:
#        fwinslash = str('/')
#    return fwinslash


#to prevent the worst, app is here insted of the if statment
app = QtWidgets.QApplication(sys.argv)

#os.system("")
# Form implementation generated from reading ui file 'C:\Users\Legion\Documents\giti\pic2ascii-GUI\GUI Code Qt6 & Qt5\u232\rva (don't touch unless, know wha yo doi'n)\rva.ui'
#
# Created by: PyQt6 UI code generator 6.0.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.WindowModality.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(985, 462)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(985, 462))
        MainWindow.setMaximumSize(QtCore.QSize(985, 462))
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        MainWindow.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:\\Users\\Legion\\Desktop\\pic2ascii\\GUI Code Qt6\\u232\\rva (don\'t touch unless, know wha yo doi\'n)\\Untitled.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setIconSize(QtCore.QSize(24, 24))
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonStyle.ToolButtonIconOnly)
        MainWindow.setAnimated(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        MainWindow.setDockNestingEnabled(False)
        self.widgetMain = QtWidgets.QWidget(MainWindow)
        self.widgetMain.setObjectName("widgetMain")
        self.tabWidget = QtWidgets.QTabWidget(self.widgetMain)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 987, 423))
        self.tabWidget.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.tabWidget.setFont(font)
        self.tabWidget.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.tabWidget.setStatusTip("")
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setIconSize(QtCore.QSize(16, 16))
        self.tabWidget.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tabHome = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.tabHome.setFont(font)
        self.tabHome.setAutoFillBackground(True)
        self.tabHome.setObjectName("tabHome")
        self.label = QtWidgets.QLabel(self.tabHome)
        self.label.setGeometry(QtCore.QRect(0, 0, 211, 71))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semilight")
        font.setPointSize(32)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tabHome)
        self.label_2.setGeometry(QtCore.QRect(60, 50, 331, 41))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(24)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_2.setFont(font)
        self.label_2.setOpenExternalLinks(False)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.tabHome)
        self.label_3.setGeometry(QtCore.QRect(160, 80, 261, 41))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.textEdit = QtWidgets.QTextEdit(self.tabHome)
        self.textEdit.setEnabled(True)
        self.textEdit.setGeometry(QtCore.QRect(450, 0, 501, 391))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.textEdit.setFont(font)
        self.textEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.textEdit.setMouseTracking(False)
        self.textEdit.setToolTip("")
        self.textEdit.setToolTipDuration(-1)
        self.textEdit.setAutoFillBackground(False)
        self.textEdit.setStyleSheet("")
        self.textEdit.setDocumentTitle("")
        self.textEdit.setUndoRedoEnabled(False)
        self.textEdit.setReadOnly(True)
        self.textEdit.setAcceptRichText(True)
        self.textEdit.setObjectName("textEdit")
        self.progressBar_2 = QtWidgets.QProgressBar(self.tabHome)
        self.progressBar_2.setGeometry(QtCore.QRect(970, 0, 16, 391))
        self.progressBar_2.setProperty("value", 0)
        self.progressBar_2.setTextVisible(False)
        self.progressBar_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.progressBar_2.setInvertedAppearance(False)
        self.progressBar_2.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar_2.setObjectName("progressBar_2")
        self.line_2 = QtWidgets.QFrame(self.tabHome)
        self.line_2.setGeometry(QtCore.QRect(10, 120, 436, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_2.setObjectName("line_2")
        self.tabWidget.addTab(self.tabHome, "")
        self.tabSetup = QtWidgets.QWidget()
        self.tabSetup.setAutoFillBackground(False)
        self.tabSetup.setObjectName("tabSetup")
        self.labelinDesk = QtWidgets.QLabel(self.tabSetup)
        self.labelinDesk.setGeometry(QtCore.QRect(10, 10, 181, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelinDesk.setFont(font)
        self.labelinDesk.setToolTipDuration(0)
        self.labelinDesk.setObjectName("labelinDesk")
        self.lineEditInDir = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditInDir.setEnabled(True)
        self.lineEditInDir.setGeometry(QtCore.QRect(260, 10, 481, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditInDir.setFont(font)
        self.lineEditInDir.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.IBeamCursor))
        self.lineEditInDir.setMouseTracking(False)
        self.lineEditInDir.setToolTipDuration(0)
        self.lineEditInDir.setText("")
        self.lineEditInDir.setFrame(True)
        self.lineEditInDir.setReadOnly(True)
        self.lineEditInDir.setClearButtonEnabled(False)
        self.lineEditInDir.setObjectName("lineEditInDir")
        self.pushButtonImageIn = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonImageIn.setGeometry(QtCore.QRect(750, 10, 211, 23))
        self.pushButtonImageIn.setToolTipDuration(0)
        self.pushButtonImageIn.setObjectName("pushButtonImageIn")
        self.labelOutDesk = QtWidgets.QLabel(self.tabSetup)
        self.labelOutDesk.setGeometry(QtCore.QRect(10, 45, 231, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelOutDesk.setFont(font)
        self.labelOutDesk.setToolTipDuration(0)
        self.labelOutDesk.setObjectName("labelOutDesk")
        self.lineEditOutDir = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditOutDir.setGeometry(QtCore.QRect(260, 45, 481, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditOutDir.setFont(font)
        self.lineEditOutDir.setToolTipDuration(0)
        self.lineEditOutDir.setText("")
        self.lineEditOutDir.setReadOnly(True)
        self.lineEditOutDir.setObjectName("lineEditOutDir")
        self.pushButtonFolderOut = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonFolderOut.setGeometry(QtCore.QRect(750, 45, 211, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.pushButtonFolderOut.setFont(font)
        self.pushButtonFolderOut.setToolTipDuration(0)
        self.pushButtonFolderOut.setObjectName("pushButtonFolderOut")
        self.labelFormatOut = QtWidgets.QLabel(self.tabSetup)
        self.labelFormatOut.setGeometry(QtCore.QRect(10, 80, 211, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelFormatOut.setFont(font)
        self.labelFormatOut.setObjectName("labelFormatOut")
        self.comboBoxFormatOut = QtWidgets.QComboBox(self.tabSetup)
        self.comboBoxFormatOut.setGeometry(QtCore.QRect(230, 80, 111, 22))
        self.comboBoxFormatOut.setObjectName("comboBoxFormatOut")
        self.comboBoxFormatOut.addItem("")
        self.comboBoxFormatOut.addItem("")
        self.comboBoxFormatOut.addItem("")
        self.progressBar = QtWidgets.QProgressBar(self.tabSetup)
        self.progressBar.setGeometry(QtCore.QRect(10, 360, 961, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.progressBar.setFont(font)
        self.progressBar.setStyleSheet("")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.stop = QtWidgets.QPushButton(self.tabSetup)
        self.stop.setGeometry(QtCore.QRect(10, 310, 111, 31))
        self.stop.setObjectName("stop")
        self.start = QtWidgets.QPushButton(self.tabSetup)
        self.start.setGeometry(QtCore.QRect(140, 310, 111, 31))
        self.start.setObjectName("start")
        self.whatToDo = QtWidgets.QComboBox(self.tabSetup)
        self.whatToDo.setGeometry(QtCore.QRect(10, 281, 241, 21))
        self.whatToDo.setEditable(False)
        self.whatToDo.setMaxVisibleItems(10)
        self.whatToDo.setDuplicatesEnabled(False)
        self.whatToDo.setFrame(True)
        self.whatToDo.setObjectName("whatToDo")
        self.whatToDo.addItem("")
        self.whatToDo.addItem("")
        self.whatToDo.addItem("")
        self.spinDialScaleFactor = QtWidgets.QDial(self.tabSetup)
        self.spinDialScaleFactor.setGeometry(QtCore.QRect(665, 205, 156, 106))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.spinDialScaleFactor.setFont(font)
        self.spinDialScaleFactor.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.CrossCursor))
        self.spinDialScaleFactor.setToolTipDuration(0)
        self.spinDialScaleFactor.setStyleSheet("")
        self.spinDialScaleFactor.setMaximum(100)
        self.spinDialScaleFactor.setPageStep(10)
        self.spinDialScaleFactor.setProperty("value", 50)
        self.spinDialScaleFactor.setSliderPosition(50)
        self.spinDialScaleFactor.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.spinDialScaleFactor.setInvertedAppearance(False)
        self.spinDialScaleFactor.setNotchTarget(5.0)
        self.spinDialScaleFactor.setNotchesVisible(False)
        self.spinDialScaleFactor.setObjectName("spinDialScaleFactor")
        self.lineEditSF = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditSF.setGeometry(QtCore.QRect(840, 250, 51, 26))
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditSF.setFont(font)
        self.lineEditSF.setReadOnly(False)
        self.lineEditSF.setObjectName("lineEditSF")
        self.labelSF = QtWidgets.QLabel(self.tabSetup)
        self.labelSF.setGeometry(QtCore.QRect(685, 310, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semilight")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelSF.setFont(font)
        self.labelSF.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.labelSF.setObjectName("labelSF")
        self.line = QtWidgets.QFrame(self.tabSetup)
        self.line.setGeometry(QtCore.QRect(5, 100, 971, 20))
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.lineEditFont = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditFont.setGeometry(QtCore.QRect(670, 160, 186, 20))
        self.lineEditFont.setToolTipDuration(0)
        self.lineEditFont.setText("")
        self.lineEditFont.setReadOnly(True)
        self.lineEditFont.setObjectName("lineEditFont")
        self.pushButtonFontIn = QtWidgets.QPushButton(self.tabSetup)
        self.pushButtonFontIn.setGeometry(QtCore.QRect(860, 160, 116, 23))
        self.pushButtonFontIn.setObjectName("pushButtonFontIn")
        self.Fontlabel = QtWidgets.QLabel(self.tabSetup)
        self.Fontlabel.setGeometry(QtCore.QRect(605, 160, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Handwriting")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.Fontlabel.setFont(font)
        self.Fontlabel.setToolTipDuration(0)
        self.Fontlabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.Fontlabel.setObjectName("Fontlabel")
        self.labelAdvanced = QtWidgets.QLabel(self.tabSetup)
        self.labelAdvanced.setGeometry(QtCore.QRect(665, 115, 261, 41))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(21)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelAdvanced.setFont(font)
        self.labelAdvanced.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.labelAdvanced.setObjectName("labelAdvanced")
        self.lineEdit = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEdit.setGeometry(QtCore.QRect(665, 195, 266, 156))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEdit.setFont(font)
        self.lineEdit.setToolTipDuration(0)
        self.lineEdit.setFrame(True)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.radioButtonBW = QtWidgets.QRadioButton(self.tabSetup)
        self.radioButtonBW.setGeometry(QtCore.QRect(137, 160, 44, 29))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic Medium")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.radioButtonBW.setFont(font)
        self.radioButtonBW.setObjectName("radioButtonBW")
        self.radioButtonRGB = QtWidgets.QRadioButton(self.tabSetup)
        self.radioButtonRGB.setGeometry(QtCore.QRect(187, 166, 81, 18))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic Medium")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.radioButtonRGB.setFont(font)
        self.radioButtonRGB.setChecked(True)
        self.radioButtonRGB.setAutoExclusive(True)
        self.radioButtonRGB.setObjectName("radioButtonRGB")
        self.labelColor = QtWidgets.QLabel(self.tabSetup)
        self.labelColor.setGeometry(QtCore.QRect(11, 162, 112, 23))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semilight")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.labelColor.setFont(font)
        self.labelColor.setObjectName("labelColor")
        self.coreLabel = QtWidgets.QLabel(self.tabSetup)
        self.coreLabel.setGeometry(QtCore.QRect(10, 125, 106, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semilight")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.coreLabel.setFont(font)
        self.coreLabel.setObjectName("coreLabel")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEdit_2.setGeometry(QtCore.QRect(0, 115, 291, 86))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setToolTipDuration(0)
        self.lineEdit_2.setFrame(True)
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.checkBoxAutoProcess = QtWidgets.QCheckBox(self.tabSetup)
        self.checkBoxAutoProcess.setEnabled(False)
        self.checkBoxAutoProcess.setGeometry(QtCore.QRect(140, 130, 51, 17))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.checkBoxAutoProcess.setFont(font)
        self.checkBoxAutoProcess.setObjectName("checkBoxAutoProcess")
        self.lineEditProcess = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditProcess.setEnabled(True)
        self.lineEditProcess.setGeometry(QtCore.QRect(200, 130, 66, 20))
        self.lineEditProcess.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEditProcess.setObjectName("lineEditProcess")
        self.lineEditChar = QtWidgets.QLineEdit(self.tabSetup)
        self.lineEditChar.setGeometry(QtCore.QRect(185, 246, 475, 26))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.lineEditChar.setFont(font)
        self.lineEditChar.setObjectName("lineEditChar")
        self.label_4 = QtWidgets.QLabel(self.tabSetup)
        self.label_4.setGeometry(QtCore.QRect(7, 244, 176, 24))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semilight")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.lineEdit_2.raise_()
        self.lineEdit.raise_()
        self.labelinDesk.raise_()
        self.lineEditInDir.raise_()
        self.pushButtonImageIn.raise_()
        self.labelOutDesk.raise_()
        self.lineEditOutDir.raise_()
        self.pushButtonFolderOut.raise_()
        self.labelFormatOut.raise_()
        self.comboBoxFormatOut.raise_()
        self.progressBar.raise_()
        self.stop.raise_()
        self.start.raise_()
        self.whatToDo.raise_()
        self.spinDialScaleFactor.raise_()
        self.lineEditSF.raise_()
        self.labelSF.raise_()
        self.line.raise_()
        self.lineEditFont.raise_()
        self.pushButtonFontIn.raise_()
        self.Fontlabel.raise_()
        self.labelAdvanced.raise_()
        self.radioButtonBW.raise_()
        self.radioButtonRGB.raise_()
        self.labelColor.raise_()
        self.coreLabel.raise_()
        self.checkBoxAutoProcess.raise_()
        self.lineEditProcess.raise_()
        self.lineEditChar.raise_()
        self.label_4.raise_()
        self.tabWidget.addTab(self.tabSetup, "")
        MainWindow.setCentralWidget(self.widgetMain)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 985, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setAutoFillBackground(False)
        self.statusbar.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:0.21, stop:0 rgba(70, 70, 0, 255), stop:0.278409 rgba(106, 106, 106, 255), stop:1 rgba(255, 255, 255, 255));\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:0.21, stop:0 rgba(153, 153, 153, 255), stop:0.278409 rgba(210, 210, 210, 255), stop:1 rgba(255, 255, 255, 255));")
        self.statusbar.setSizeGripEnabled(False)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtGui.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionAbout_Pic2Ascii = QtGui.QAction(MainWindow)
        self.actionAbout_Pic2Ascii.setObjectName("actionAbout_Pic2Ascii")
        self.actionContact = QtGui.QAction(MainWindow)
        self.actionContact.setObjectName("actionContact")
        self.actionReport_an_Erorr = QtGui.QAction(MainWindow)
        self.actionReport_an_Erorr.setObjectName("actionReport_an_Erorr")
        self.actionRequest_a_Feature = QtGui.QAction(MainWindow)
        self.actionRequest_a_Feature.setObjectName("actionRequest_a_Feature")
        self.actionLicence = QtGui.QAction(MainWindow)
        self.actionLicence.setObjectName("actionLicence")
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionContact)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionReport_an_Erorr)
        self.menuHelp.addAction(self.actionRequest_a_Feature)
        self.menuAbout.addAction(self.actionAbout_Pic2Ascii)
        self.menuAbout.addAction(self.actionLicence)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ErMax.Inc-Pic2Ascii"))
        self.label.setText(_translate("MainWindow", "Welcome!"))
        self.label_2.setText(_translate("MainWindow", "Choose Setup to begin,"))
        self.label_3.setText(_translate("MainWindow", "or select Help! for help."))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Yu Gothic UI\',\'Arial\',\'Arial\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:20pt;\">Release Notes</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt;\">pic2ascii is an open source app run by the ErMax.Inc comunity. Pic2ascii can turn regular pictures into ascii characters with detail (or no detail) and </span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#ff0000;\">c</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#ffaa00;\">o</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#a2a200;\">l</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#00aa00;\">o</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#0055ff;\">r</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#aa00ff;\">. </span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#000000;\">You can also control various peramitars like the scale factor of the characters, the font and even the characters themself. At the moment, pic2ascii only suports the .jpg as an input format and both jpg and .png as an output format but that may change in the future. For now please enjoy the comunity\'s software.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Yu Gothic UI\'; font-size:8.25pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:9pt; color:#000000;\">    --ErMax Team</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabHome), _translate("MainWindow", "Home"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tabHome), _translate("MainWindow", "This is the Home Tab"))
        self.labelinDesk.setToolTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.labelinDesk.setStatusTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.labelinDesk.setText(_translate("MainWindow", "Input Image/Image Sequence:"))
        self.lineEditInDir.setToolTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.lineEditInDir.setStatusTip(_translate("MainWindow", "Where Your Original Image is Located"))
        self.pushButtonImageIn.setToolTip(_translate("MainWindow", "The dir of Where Your Original Image is Located"))
        self.pushButtonImageIn.setStatusTip(_translate("MainWindow", "The dir of Where Your Original Image is Located"))
        self.pushButtonImageIn.setText(_translate("MainWindow", "Browse (Image/Image Sequance)"))
        self.labelOutDesk.setToolTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.labelOutDesk.setStatusTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.labelOutDesk.setText(_translate("MainWindow", "Output Folder Image/Image Sequence:"))
        self.lineEditOutDir.setToolTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.lineEditOutDir.setStatusTip(_translate("MainWindow", "Where your Output Image is Located"))
        self.pushButtonFolderOut.setToolTip(_translate("MainWindow", "The dir of Where your Output Image is Located"))
        self.pushButtonFolderOut.setStatusTip(_translate("MainWindow", "The dir of Where your Output Image is Located"))
        self.pushButtonFolderOut.setText(_translate("MainWindow", "Browse (Folder)"))
        self.labelFormatOut.setText(_translate("MainWindow", "Output Image Formats (Supported):"))
        self.comboBoxFormatOut.setItemText(0, _translate("MainWindow", "PNG (Default)"))
        self.comboBoxFormatOut.setItemText(1, _translate("MainWindow", "JPG"))
        self.comboBoxFormatOut.setItemText(2, _translate("MainWindow", "TXT (Text File)"))
        self.progressBar.setFormat(_translate("MainWindow", "%p% ((var) Pictures)"))
        self.stop.setText(_translate("MainWindow", "Stop"))
        self.start.setText(_translate("MainWindow", "Start"))
        self.whatToDo.setItemText(0, _translate("MainWindow", "Do Nothing When Finished (Default)"))
        self.whatToDo.setItemText(1, _translate("MainWindow", "Close Window When Finished"))
        self.whatToDo.setItemText(2, _translate("MainWindow", "Shutdown PC (Windows only)"))
        self.spinDialScaleFactor.setToolTip(_translate("MainWindow", "Dial"))
        self.lineEditSF.setText(_translate("MainWindow", "0.05"))
        self.labelSF.setText(_translate("MainWindow", "ASCII Character Scale Factor"))
        self.lineEditFont.setToolTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.lineEditFont.setStatusTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.pushButtonFontIn.setText(_translate("MainWindow", "Browse Font File"))
        self.Fontlabel.setToolTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.Fontlabel.setStatusTip(_translate("MainWindow", "The Font of The Ascii Charaters"))
        self.Fontlabel.setText(_translate("MainWindow", "Font:"))
        self.labelAdvanced.setText(_translate("MainWindow", "Advanced Features:"))
        self.lineEdit.setToolTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.lineEdit.setStatusTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.radioButtonBW.setText(_translate("MainWindow", "B/W"))
        self.radioButtonRGB.setText(_translate("MainWindow", "Color (RGB)"))
        self.labelColor.setText(_translate("MainWindow", "Image Color:"))
        self.coreLabel.setText(_translate("MainWindow", "CPU Processes:"))
        self.lineEdit_2.setToolTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.lineEdit_2.setStatusTip(_translate("MainWindow", "The Scale Factor of The Ascii Charaters"))
        self.checkBoxAutoProcess.setText(_translate("MainWindow", "Auto"))
        self.lineEditProcess.setText(_translate("MainWindow", "1"))
        self.lineEditChar.setText(_translate("MainWindow", "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\"^`\'."))
        self.label_4.setText(_translate("MainWindow", "Characters (bright to dark):"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabSetup), _translate("MainWindow", "Setup"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tabSetup), _translate("MainWindow", "This is where you setup the source and ouput"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help!"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setStatusTip(_translate("MainWindow", "This exits the program"))
        self.actionAbout_Pic2Ascii.setText(_translate("MainWindow", "About Pic2Ascii"))
        self.actionContact.setText(_translate("MainWindow", "Contact"))
        self.actionReport_an_Erorr.setText(_translate("MainWindow", "Report an Erorr!"))
        self.actionRequest_a_Feature.setText(_translate("MainWindow", "Request a Feature"))
        self.actionLicence.setText(_translate("MainWindow", "Licence"))




#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################

   


        #Edits ##we put this here to help us later when biulding a later GUI version
        self.pushButtonImageIn.clicked.connect(lambda:call_atrib.InputFileLoc())
        self.pushButtonFolderOut.clicked.connect(lambda:call_atrib.OutImgFolder())
        self.pushButtonFontIn.clicked.connect(lambda:call_atrib.fnt_loc())
        self.spinDialScaleFactor.valueChanged.connect(lambda:call_atrib.dialSF())
        self.lineEditSF.textChanged.connect(lambda:call_atrib.editSF())
        self.actionReport_an_Erorr.triggered.connect(lambda:self.win_browser())
        self.start.clicked.connect(lambda:call_pta.main())

#############################################################################################################
#window (from fine imports)
#############################################################################################################




    def win_browser(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = reis.Ui_ReportWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        
        #button linking

        self.ui.pushButtonGitHub.clicked.connect(lambda:call_actions.GitHub())
        self.ui.pushButtonMsForms.clicked.connect(lambda:call_actions.MsForms())

#############################################################################################################
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
######################################

class dtet():
    #delete func once done with program
    def test_msg(self):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.showinfo('worked', str('it worked'))

        root.deiconify()
        root.destroy()
        root.quit()
        del root

class actions:
    def GitHub(self):
        try:
            webbrowser.open('https://gitlab.com/ermax-inc/pic2ascii/-/issues/new')
        except:
            call_error.report_error()
        ui.window.close()
    
        
    def MsForms(self):
        try:
            webbrowser.open('https://forms.office.com/Pages/ResponsePage.aspx?id=DQSIkWdsW0yxEjajBLZtrQAAAAAAAAAAAAZAAP6tCSRUOEJOMDczWjlJMURGME8wNTBIMEtTQ0ZSSi4u')
        except:
            call_error.report_error()
        ui.window.close()

class atrib(Ui_MainWindow):
    def InputFileLoc(self):
        
        if int(os.name.lower().find('nt')) != int(-1):
            winslash = str('\\')
        else:
            winslash = str('/')

        fileman = Tk()
        fileman.withdraw()
        fileman.attributes('-alpha', 0)
        global file_path_list
        
        file_path_list = askopenfilenames(filetypes=(("JPEG/JPG files","*.jpeg *.jpg"),), title='Select All Pictures to Ascii.')
        file_path_list = list(file_path_list)

        if file_path_list:
            ui.lineEditInDir.setText(str(file_path_list[0].replace('/', str(winslash))))

        fileman.deiconify()
        fileman.destroy()
        fileman.quit()

    def OutImgFolder(self):
        if int(os.name.lower().find('nt')) != int(-1):
            winslash = str('\\')
        else:
            winslash = str('/')

        folderman = Tk()
        folderman.withdraw()
        folderman.attributes('-alpha', 0)
        global folder_out_path
        #initialdir='/'
        folder_out_path = askdir(title='Select Ascii Image Output Folder',)

        if folder_out_path:
            try:
                ui.lineEditOutDir.setText(str(folder_out_path.replace('/', str(winslash))))
            except:
                call_error.invalid_img_type()
            else:
                folderman.deiconify()
                folderman.destroy()
                folderman.quit()
    

    def fnt_loc(self):
        
        if int(os.name.lower().find('nt')) != int(-1):
            winslash = str('\\')
        else:
            winslash = str('/')
        
        fntman = Tk()
        fntman.withdraw()
        fntman.attributes('-alpha', 0)
        global fnt_path
        fnt_path = askopenfilename(filetypes=(("TrueType Font Files","*.ttf *.tte *.ttc"), ("OpenType Font Files","*.otf *.otc"), ("All Font Files", "*.ttf *.ttc *.tte *.otf *.otc")), initialdir=str(os.getcwd() + winslash + 'fnts'), title='Choose Your Ascii Font')
        if fnt_path:
            ui.lineEditFont.setText(str(fnt_path))
        fntman.deiconify()
        fntman.destroy()
        fntman.quit()
    
            
    def dialSF(self):
        sfd_val = float(ui.spinDialScaleFactor.value() / 100)
        ui.lineEditSF.setText(str(sfd_val))
        #print(ui.lineEditSF.text())
    
        
    def editSF(self):
        try:
            float(ui.lineEditSF.text())
        except:
            ui.lineEditSF.backspace()
        else:
            ui.spinDialScaleFactor.setValue(int(float(ui.lineEditSF.text()) * 100))
        #get the value of the edit widget
        #and change the dial
        #ui.spinDialScaleFactor


#########################################################################################################



class error:
    def invalid_dir(self, x):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.showerror('Invalid Directory', str('For Some Reason The Directory \'%s\' is invalid' % x))

        root.deiconify()
        root.destroy()
        root.quit()
        del root
    
    def invalid_img_type(self):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.showerror('Not suppored Image type', str('This image type is not valid!\nThe only valid image types are .jpg and .jpeg'))

        root.deiconify()
        root.destroy()
        root.quit()
        del root

    def report_error(self):
        #fix this later
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        messagebox.askquestion(title='Web Browser Error', message=str('For some reason your web browser could not load!'))

        root.deiconify()
        root.destroy()
        root.quit()
        del root

class exiting:
    def message(self):
        root = Tk()
        root.eval('tk::PlaceWindow %s center' % root.winfo_toplevel())
        root.withdraw()
        root.attributes('-alpha', 0)

        exitprompt = messagebox.askyesno(title='Exit?', message='Are You Want to Exit?')
        if int(exitprompt) == 1:
            root.deiconify()
            root.destroy()
            root.quit()
            del exitprompt
            del root
            return True
        elif int(exitprompt) == 0:
            root.deiconify()
            root.destroy()
            root.quit()
            del exitprompt
            del root
            return False


        #root.deiconify()
        #root.destroy()
        #root.quit()
        #del root
class pta:  
    def file_gen():
        
        properseq = int(3)

        def isInt(num):
            """
            Finds if a number is an int or a float.
            This is a better version of the "isinstance"
            function in python. This function returns a
            bool value (like the "isinstance" function)
            :param num: The number to check if is a int
            ::returns True if int
            ::returns False if float
            """
            if str(type(num)) == '<class \'int\'>' or str(type(num)) == '<class \'float\'>':
                num = str(num)
                if num.find('.'):
                    if len(num) >= 3:
                        if num[2].find('0') == int(-1):
                            return False
                        else:
                            return True
                    else:
                        return True
                else:
                    return True
            else:
                return None

        def isFloat(num):
            """
            Finds if a number is an int or a float.
            This is a better version of the "isinstance"
            function in python. This function returns a
            bool value (like the "isinstance" function)
            :param num: The number to check if is a float
            ::returns False if int
            ::returns True if float
            """
            if str(type(num)) == '<class \'int\'>' or str(type(num)) == '<class \'float\'>':
                num = str(num)
                if num.find('.'):
                    if len(num) >= 3:
                        if num[2].find('0') == int(-1):
                            return True
                        else:
                            return False
                    else:
                        return False
                else:
                    return False
            else:
                return None


        fileman = Tk()
        fileman.wm_state('iconic')
        file_path_list = askopenfilenames(filetypes=(("JPEG/JPG files","*.jpeg *.jpg"), ("PNG files (in beta)", "*.png"), ("Any file", "*")), title='Select pictures.')  #initialdir="/"
        #fileman.mainloop()
        file_path_list = list(file_path_list)
        if not file_path_list:
            print('you have no files selected')
            sleep(.5)
            print('exiting')
            sleep(.2)
            exit()
        else:
            #this variable (x) is a preuse of the while loop. We will keep this variable for future purposes
            if str(os.name) == 'nt':
                dirslash = '\\'
            else:
                dirslash = '/'
        
            print('starting...', end='\n\n')

        

        
            for zink in range(properseq):
                try:shutil.rmtree(str(os.getcwd()) + str(dirslash) + str(int(zink + 1)))
                except:
                    try:os.mkdir((str(os.getcwd()) + str(dirslash) + str(int(zink + 1))))
                    except:
                        print('You have a file open or being acsessed in:\n\n' + str(os.getcwd()) + str(dirslash) + str(int(zink + 1)) + '\n\nplease close the program that is acsessing this folder and try again.')
                        sleep(1)
                        print('exiting')
                        sleep(.3)
                        exit()
                else:os.mkdir((str(os.getcwd()) + str(dirslash) + str(int(zink + 1))))
            
                # if os.path.isdir(str(os.getcwd()) + str(dirslash) + str(int(zink +1)) + str(dirslash) + 'outputTextFiles') == bool(False):
                #     os.mkdir(str(os.getcwd()) + str(dirslash) + str(int(zink +1)) + str(dirslash) + 'outputTextFiles')
                # if os.path.isdir(str(os.getcwd()) + str(dirslash) + str(int(zink +1)) + str(dirslash) + 'outputPictureFiles') == bool(False):
                #     os.mkdir(str(os.getcwd()) + str(dirslash) + str(int(zink +1)) + str(dirslash) + 'outputPictureFiles')
                # if os.path.isdir(str(os.getcwd()) + str(dirslash) + str(int(zink + 1)) + str(dirslash) + 'outputTF') == bool(False):
                #     os.mkdir(str(os.getcwd()) + str(dirslash) + str(int(zink + 1)) + str(dirslash) + 'outputTF')
            del zink

            extitems = {}
            for tmp in range(len(list(file_path_list))):
                extitems[tmp] = False
            del tmp

            for thing in range(properseq):
                tmp = open(str(os.getcwd()) + str(dirslash) + str(int(thing + 1)) + str(dirslash) + 'tmp' + '.tmp', 'w')
                tmp.write('[')
                for in_file in range(math.floor(int(len(file_path_list)) / int(properseq))):
                    tmp.write(str(file_path_list[int(thing)]))
                    extitems[thing] = True
                    if int(in_file + 1) == math.floor(int(len(file_path_list)) / int(properseq)):pass
                    else:tmp.write(', ')
                if int(thing + 1) == int(properseq) and isFloat(int(len(file_path_list)) / int(properseq)):
                    tmp.write(', ')
                    extitems2 = extitems.copy()
                    for delif in extitems2:
                        if extitems[delif] == True:
                            del extitems[delif]
                    del extitems2
                    tls=0
                    extlist = list(extitems.keys())
                    for witems in extlist:
                        tmp.write(str(list(file_path_list)[int(witems)]))
                        tls += 1
                        if int(len(extlist)) == int(tls):pass
                        else:tmp.write(', ')
                    
                tmp.write(']')
                tmp.close()
            input('done! press enter to exit')
    def getChar(self, inputInt):
        #chars = '''$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`'. '''[::-1]
        chars = str(ui.lineEditChar.text())

        charArray = list(chars)
        charLength = len(charArray)
        interval = charLength/256
        return charArray[math.floor(inputInt*interval)]
    
    def main(self):
        #chars = '''$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`'. '''[::-1]
        chars = str(ui.lineEditChar.text())

        charArray = list(chars)
        charLength = len(charArray)
        interval = charLength/256
        oneCharWidth = 10
        oneCharHeight = 18
        
        #tfFPS = int(30)
        
        scaleFactor = 0.09

        #fileman = Tk()
        #fileman.wm_state('iconic')
        #file_path_list = askopenfilenames(filetypes=(("JPEG/JPG files","*.jpeg *.jpg"), ("PNG files (in beta)", "*.png"), ("Any file", "*")), title='Select pictures.')  #initialdir="/"
        ##fileman.mainloop()
        #file_path_list = list(file_path_list)
        #if not file_path_list:
        #    print('you have no files selected')
        #    sleep(.5)
        #    print('exiting')
        #    sleep(.2)
        #    exit()
        #else:
            #this variable (x) is a preuse of the while loop. We will keep this variable for future purposes
        x = 0
        if str(os.name) == 'nt':
            dirslash = '\\'
        else:
            dirslash = '/'
            
        print('starting...', end='\n\n')
        for file in file_path_list:
                
            im = PIL.Image.open(file_path_list[int(x)])
            if file_path_list[int(x)][-4] == '.' and file_path_list[int(x)][-3] == 'p' and file_path_list[int(x)][-2] == 'n' and file_path_list[int(x)][-1] == 'g':
                format = 'RGBA'
            else:
                format = 'RGB'
            fnt = ImageFont.truetype('C:\\Windows\\Fonts\\lucon.ttf', 15)

            width, height = im.size
            im = im.resize((int(scaleFactor*width), int(scaleFactor*height*(oneCharWidth/oneCharHeight))), PIL.Image.NEAREST)
            width, height = im.size
            pix = im.convert(str(format))

            outputImage = PIL.Image.new(str(format), (oneCharWidth * width, oneCharHeight * height), color = (0, 0, 0))

            d = ImageDraw.Draw(outputImage)
                
            if os.path.isdir(str(folder_out_path) + str(dirslash) + 'outputTextFiles') == bool(False):
                os.mkdir(str(folder_out_path) + str(dirslash) + 'outputTextFiles')
            if os.path.isdir(str(folder_out_path) + str(dirslash) + 'outputPictureFiles') == bool(False):
                os.mkdir(str(folder_out_path) + str(dirslash) + 'outputPictureFiles')
            if os.path.isdir(str(folder_out_path) + str(dirslash) + 'outputTF') == bool(False):
                os.mkdir(str(folder_out_path) + str(dirslash) + 'outputTF')

            tf = open(str(folder_out_path) + str(dirslash) + 'outputTF' + str(dirslash) + str(int(x + 1)) + '.txt', "w")
            text_file = open(str(folder_out_path) + str(dirslash) + 'outputTextFiles' + str(dirslash) + str(f"Output{int(x) + int(1)}.txt"), "w")
            for i in range(height):
                for j in range(width):
                    if format == 'RGBA':
                        r, g, b, a = pix.getpixel((j, i))
                    elif format == 'RGB':
                        r, g, b = pix.getpixel((j, i))
                    #r, g, b = pix[j, i]
                    h = int(r/3 + g/3 + b/3)
                    #pix.getpixel((j, i)) = (h, h, h)#line no work nomore
                    text_file.write(self.getChar(h))
                    tf.write(str(fg(r, g, b)) + str(self.getChar(h)))
                    if format == 'RGBA':
                        d.text((math.ceil(int(j*oneCharWidth)), math.ceil(int(i*oneCharHeight))), self.getChar(h), font = fnt, fill = (int(r), int(g), int(b), int(a)))
                    elif format == 'RGB':
                        d.text((math.ceil(int(j*oneCharWidth)), math.ceil(int(i*oneCharHeight))), self.getChar(h), font = fnt, fill = (int(r), int(g), int(b)))
                    try:
                        print(fg(r, g, b) + str(self.getChar(h)), end='') #please don't put fg.rs into the code or it will slow down a lot
                    except:
                        try:
                            print(str(self.getChar(h)), end='')
                        except:
                            print('?', end='')
                tf.write('\n')
                text_file.write('\n')
                print()
            text_file.close()
            tf.close()
            x += int(1)
            outputImage.save(str(folder_out_path) + str(dirslash) + 'outputPictureFiles' + str(dirslash) + 'output' + str(x) + '.png')
            if int(len(file_path_list)) >= int(x + 1):
                print(f'{fg.rs}\n\nImage {x} is done, going to next image\n\n')

        try:input(fg.rs + '\n\nall done! Press enter to exit!')
        except:input('\n\nall done! Press enter to exit!')
    
    def pg(self):
        if __name__ == '__main__':
            #in the future, please use the commeted forloop
            #for _ in (whatever the process/core variable is):
            for _ in [0]:
                pta_ps = Process(target=self.main) #args=(file_path_list,)
                pta_ps.start()

#class debunks
call_atrib = atrib()
call_error = error()
call_dtet = dtet()
call_actions = actions()
call_exiting = exiting()
call_pta = pta()

if __name__ == "__main__":
    def mtrest():       
        MainWindow.show()
        try:
            sys.exit(app.exec())
        except SystemExit:
            estsx = call_exiting.message()
            if estsx == bool(True):
                MainWindow.close()
            elif estsx == bool(False):
                the_other_one()
            else:
                pass
            
    def the_other_one():
        MainWindow.show()
        try:
            sys.exit(app.exec())
        except SystemExit:
            estsx = call_exiting.message()
            if estsx == bool(True):
                MainWindow.close()
            elif estsx == bool(False):
                estsx = None
                mtrest()
            else:
                pass
    #app = QtWidgets.QApplication(sys.argv)
    
    
    MainWindow.show()
    #please don't set arg val to true as it will skrew things up

    try:
        sys.exit(app.exec())
    except SystemExit:
        estsx = call_exiting.message()
        if estsx == bool(True):
           MainWindow.close()
        elif estsx == bool(False):
            estsx = None
            mtrest()
        else:
            pass
